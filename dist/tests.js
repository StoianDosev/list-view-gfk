eval("(function() {function generateContent(n) {\r\n  var content = Ember.A();\r\n  for (var i = 0; i < n; i++) {\r\n    content.push({name: \"Item \" + (i+1)});\r\n  }\r\n  return content;\r\n}\r\n\r\nfunction extractPositionFromTransform(string) {\r\n  var matched, x, y, position;\r\n\r\n  matched = string.match(/translate(?:3d)?\\((-?\\d+)px,\\s*(-?\\d+)px/);\r\n\r\n  x = parseInt(matched[1], 10);\r\n  y = parseInt(matched[2], 10);\r\n\r\n  position = {\r\n    x: x,\r\n    y: y\r\n  };\r\n\r\n  return position;\r\n}\r\n\r\nfunction extractNumberFromPosition(string) {\r\n  var number = string.replace(/px/g,\'\');\r\n  return parseInt(number, 10);\r\n}\r\n\r\nfunction extractPosition(element) {\r\n  var style, position,\r\n    transformProp = Ember.ListViewHelper.transformProp;\r\n\r\n  style = element.style;\r\n\r\n  if (style.top) {\r\n    position = {\r\n      y: extractNumberFromPosition(style.top),\r\n      x: extractNumberFromPosition(style.left)\r\n    };\r\n  } else if (style[transformProp]) {\r\n    position = extractPositionFromTransform(style[transformProp]);\r\n  }\r\n\r\n  return position;\r\n}\r\n\r\nfunction sortElementsByPosition (elements) {\r\n  return elements.sort(function(a, b){\r\n    var aPosition, bPosition;\r\n\r\n    aPosition = extractPosition(a);\r\n    bPosition = extractPosition(b);\r\n\r\n    if (bPosition.y === aPosition.y){\r\n      return (aPosition.x - bPosition.x);\r\n    } else {\r\n      return (aPosition.y - bPosition.y);\r\n    }\r\n  });\r\n}\r\n\r\nfunction sortByPosition (a, b) {\r\n  var aPosition, bPosition;\r\n\r\n  aPosition = a;\r\n  bPosition = b;\r\n\r\n  if (bPosition.y === aPosition.y){\r\n    return (aPosition.x - bPosition.x);\r\n  } else {\r\n    return (aPosition.y - bPosition.y);\r\n  }\r\n}\r\n\r\nfunction itemPositions(view) {\r\n  return Ember.A(view.$(\'.ember-list-item-view\').toArray()).map(function(e) {\r\n    return extractPosition(e);\r\n  }).sort(sortByPosition);\r\n}\r\n\r\nwindow.helper = {\r\n  itemPositions: itemPositions,\r\n  generateContent: generateContent,\r\n  sortElementsByPosition: sortElementsByPosition,\r\n  extractPosition: extractPosition\r\n};\r\n})();//@ sourceURL=test_helper.js");

eval("(function() {var css, view, helper;\r\nhelper = window.helper;\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.ListView integration - Content\", {\r\n  setup: function() {\r\n    css = Ember.$(\"<style>\" +\r\n            \".ember-list-view {\" +\r\n            \"  overflow: auto;\" +\r\n            \"  position: relative;\" +\r\n            \"}\" +\r\n            \".ember-list-item-view {\" +\r\n            \"  position: absolute;\" +\r\n            \"}\" +\r\n            \".is-selected {\" +\r\n            \"  background: red;\" +\r\n            \"}\" +\r\n            \"</style>\").appendTo(\'head\');\r\n  },\r\n  teardown: function() {\r\n    css.remove();\r\n\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n  }\r\n});\r\n\r\ntest(\"the ember-list helper\", function() {\r\n  var content = helper.generateContent(100);\r\n\r\n  view = Ember.View.create({\r\n    controller: content,\r\n    template: Ember.Handlebars.compile(\"{{#ember-list height=500 row-height=50}}{{name}}{{/ember-list}}\")\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The rendered list was updated\");\r\n  equal(view.$(\'.ember-list-container\').height(), 5000, \"The scrollable view has the correct height\");\r\n});\r\n\r\ntest(\"the ember-list helper uses items=\", function() {\r\n  var content = helper.generateContent(100);\r\n\r\n  view = Ember.View.create({\r\n    controller: { itemz: content },\r\n    template: Ember.Handlebars.compile(\"{{#ember-list items=itemz height=500 row-height=50}}{{name}}{{/ember-list}}\")\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The rendered list was updated\");\r\n  equal(view.$(\'.ember-list-container\').height(), 5000, \"The scrollable view has the correct height\");\r\n});\r\n\r\ntest(\"replacing the list content\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function() {\r\n    view.set(\'content\', Ember.A([{name: \'The only item\'}]));\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 1, \"The rendered list was updated\");\r\n  equal(view.$(\'.ember-list-container\').height(), 50, \"The scrollable view has the correct height\");\r\n});\r\n\r\ntest(\"adding to the front of the list content\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function() {\r\n    content.unshiftObject({name: \"Item -1\"});\r\n  });\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(Ember.$(positionSorted[0]).text(), \"Item -1\", \"The item has been inserted in the list\");\r\n  equal(view.$(\'.ember-list-container\').height(), 5050, \"The scrollable view has the correct height\");\r\n});\r\n\r\ntest(\"inserting in the middle of visible content\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function() {\r\n    content.insertAt(2, {name: \"Item 2\'\"});\r\n  });\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(Ember.$(positionSorted[0]).text(), \"Item 1\", \"The item has been inserted in the list\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Item 2\'\", \"The item has been inserted in the list\");\r\n});\r\n\r\ntest(\"clearing the content\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function() {\r\n    content.clear();\r\n  });\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(positionSorted.length, 0, \"The list should not contain any elements\");\r\n});\r\n\r\ntest(\"deleting the first element\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(Ember.$(positionSorted[0]).text(), \"Item 1\", \"The item has been inserted in the list\");\r\n\r\n  Ember.run(function() {\r\n    content.removeAt(0);\r\n  });\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(Ember.$(positionSorted[0]).text(), \"Item 2\", \"The item has been inserted in the list\");\r\n});\r\n\r\n})();//@ sourceURL=content_tests.js");

eval("(function() {var css, view, helper;\r\nhelper = window.helper;\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\nvar template = Ember.Handlebars.compile(\"<a {{action \'wat\'}}\" +\r\n    \" href=\'#\'><span class=\'controller\'>{{foo}}</span>\" +\r\n    \"<span class=\'context\'>{{name}}</span></a>\");\r\n\r\nvar dispatcher;\r\nmodule(\"Ember.ListView controllers\", {\r\n  setup: function() {\r\n    css = Ember.$(\"<style>\" +\r\n            \".ember-list-view {\" +\r\n            \"  overflow: auto;\" +\r\n            \"  position: relative;\" +\r\n            \"}\" +\r\n            \".ember-list-item-view {\" +\r\n            \"  position: absolute;\" +\r\n            \"}\" +\r\n            \".is-selected {\" +\r\n            \"  background: red;\" +\r\n            \"}\" +\r\n            \"</style>\").appendTo(\'head\');\r\n\r\n    dispatcher = Ember.EventDispatcher.create();\r\n    dispatcher.setup();\r\n  },\r\n  teardown: function() {\r\n    css.remove();\r\n\r\n    Ember.run(function() {\r\n      dispatcher.destroy();\r\n      if (view) { view.destroy(); }\r\n    });\r\n\r\n    Ember.ENABLE_PROFILING = false;\r\n  }\r\n});\r\n\r\ntest(\"parent controller\", function() {\r\n  var watWasCalled = false;\r\n  var controller = Ember.Controller.extend({\r\n    foo: \'bar\',\r\n    actions: {\r\n      wat: function() {\r\n        watWasCalled = true;\r\n      }\r\n    }\r\n  }).create();\r\n\r\n  view = Ember.ContainerView.create({\r\n    controller: controller\r\n  });\r\n\r\n  var content = Ember.A([\r\n    { name: \'entry\' }\r\n  ]);\r\n\r\n  var listView = view.createChildView(Ember.ListView.extend({\r\n    itemViewClass: Ember.ReusableListItemView.extend({\r\n      template: template\r\n    }),\r\n    height: 500,\r\n    rowHeight: 50,\r\n    content: content\r\n  }));\r\n\r\n  appendView();\r\n\r\n  Ember.run(function(){\r\n    view.pushObject(listView);\r\n  });\r\n\r\n  equal(listView.get(\'controller\'), controller);\r\n  equal(listView.get(\'childViews.firstObject.controller\'), controller);\r\n\r\n  equal(listView.$(\'a .controller\').text(), \'\');\r\n  equal(listView.$(\'a .context\').text(), \'entry\');\r\n\r\n  listView.$(\'a\').trigger(\'click\');\r\n\r\n  ok(watWasCalled, \'expected correct action bubbling\');\r\n});\r\n\r\ntest(\"itemController\", function() {\r\n  var container = new Ember.Container();\r\n  var watWasCalled = false;\r\n\r\n  container.register(\'controller:item\', Ember.ObjectController.extend({\r\n    foo: \'bar\',\r\n    actions: {\r\n      wat: function() {\r\n        watWasCalled = true;\r\n      }\r\n    }\r\n  }));\r\n\r\n  var controller = Ember.ArrayController.create({\r\n    content: Ember.A([ { name: \'entry\' } ]),\r\n    itemController: \'item\',\r\n    container: container\r\n  });\r\n\r\n  view = Ember.ContainerView.create();\r\n\r\n  var listView = view.createChildView(Ember.ListView.extend({\r\n    itemViewClass: Ember.ReusableListItemView.extend({\r\n      template: template\r\n    }),\r\n    height: 500,\r\n    rowHeight: 50,\r\n    content: controller,\r\n    container: container\r\n  }));\r\n\r\n  appendView();\r\n\r\n  Ember.run(function(){\r\n    view.pushObject(listView);\r\n  });\r\n\r\n  equal(listView.$(\'a .controller\').text(), \'bar\');\r\n  equal(listView.$(\'a .context\').text(), \'entry\');\r\n\r\n  equal(listView.get(\'childViews.firstObject.controller.foo\'), \'bar\');\r\n\r\n  listView.$(\'a\').trigger(\'click\');\r\n\r\n  ok(watWasCalled, \'expected correct action bubbling\');\r\n});\r\n})();//@ sourceURL=controller_test.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/helper.js should pass jshint\', function() { \n  ok(true, \'list-view/helper.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/helper.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_item_view.js should pass jshint\', function() { \n  ok(true, \'list-view/list_item_view.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_item_view.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_item_view_mixin.js should pass jshint\', function() { \n  ok(true, \'list-view/list_item_view_mixin.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_item_view_mixin.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_view.js should pass jshint\', function() { \n  ok(true, \'list-view/list_view.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_view.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_view_helper.js should pass jshint\', function() { \n  ok(true, \'list-view/list_view_helper.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_view_helper.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_view_mixin.js should pass jshint\', function() { \n  ok(true, \'list-view/list_view_mixin.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_view_mixin.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/main.js should pass jshint\', function() { \n  ok(true, \'list-view/main.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/main.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/reusable_list_item_view.js should pass jshint\', function() { \n  ok(true, \'list-view/reusable_list_item_view.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/reusable_list_item_view.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/virtual_list_scroller_events.js should pass jshint\', function() { \n  ok(true, \'list-view/virtual_list_scroller_events.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/virtual_list_scroller_events.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/virtual_list_view.js should pass jshint\', function() { \n  ok(true, \'list-view/virtual_list_view.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/virtual_list_view.jshint.js");

eval("(function() {var css, view, helper;\r\nhelper = window.helper;\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.ListView Acceptance\", {\r\n  setup: function() {\r\n    css = Ember.$(\"<style>\" +\r\n            \".ember-list-view {\" +\r\n            \"  overflow: auto;\" +\r\n            \"  position: relative;\" +\r\n            \"}\" +\r\n            \".ember-list-item-view {\" +\r\n            \"  position: absolute;\" +\r\n            \"}\" +\r\n            \".is-selected {\" +\r\n            \"  background: red;\" +\r\n            \"}\" +\r\n            \"</style>\").appendTo(\'head\');\r\n  },\r\n  teardown: function() {\r\n    css.remove();\r\n\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n\r\n    Ember.ENABLE_PROFILING = false;\r\n  }\r\n});\r\n\r\ntest(\"should exist\", function() {\r\n  view = Ember.ListView.create({\r\n    height: 500,\r\n    rowHeight: 50\r\n  });\r\n  appendView();\r\n  ok(view);\r\n});\r\n\r\ntest(\"should render an empty view when there is no content\", function() {\r\n  var content = helper.generateContent(0),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      emptyViewHeight = 175,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      }),\r\n      emptyView = Ember.View.extend({\r\n        attributeBindings: [\'style\'],\r\n        classNames: [\'empty-view\'],\r\n        style: \'height:\' + emptyViewHeight + \'px;\'\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    emptyView: emptyView\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\r\n  equal(view.$(\'.ember-list-container\').height(), emptyViewHeight, \"The scrollable view has the correct height\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 0, \"The correct number of rows were rendered\");\r\n  equal(view.$(\'.empty-view\').length, 1, \"The empty view rendered\");\r\n\r\n  Ember.run(function () {\r\n    view.set(\'content\', helper.generateContent(10));\r\n  });\r\n\r\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\r\n  equal(view.$(\'.ember-list-container\').height(), 500, \"The scrollable view has the correct height\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\r\n  equal(view.$(\'.empty-view\').length, 0, \"The empty view is removed\");\r\n\r\n  Ember.run(function () {\r\n    view.set(\'content\', content);\r\n  });\r\n\r\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\r\n  equal(view.$(\'.ember-list-container\').height(), emptyViewHeight, \"The scrollable view has the correct height\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 0, \"The correct number of rows were rendered\");\r\n  equal(view.$(\'.empty-view\').length, 1, \"The empty view rendered\");\r\n\r\n  Ember.run(function () {\r\n      view.set(\'content\', helper.generateContent(10));\r\n  });\r\n\r\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\r\n  equal(view.$(\'.ember-list-container\').height(), 500, \"The scrollable view has the correct height\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\r\n  equal(view.$(\'.empty-view\').length, 0, \"The empty view has been removed\");\r\n});\r\n\r\ntest(\"should render a subset of the full content, based on the height, in the correct positions\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\r\n  equal(view.$(\'.ember-list-container\').height(), 5000, \"The scrollable view has the correct height\");\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\r\n  equal(Ember.$(positionSorted[0]).text(), \"Item 1\");\r\n  equal(Ember.$(positionSorted[10]).text(), \"Item 11\");\r\n\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]);\r\n});\r\n\r\ntest(\"should render correctly with an initial scrollTop\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 475\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Item 10\");\r\n  equal(Ember.$(positionSorted[10]).text(), \"Item 20\");\r\n\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950], \"The rows are in the correct positions\");\r\n});\r\n\r\ntest(\"should perform correct number of renders and repositions on short list init\", function () {\r\n  var content = helper.generateContent(8),\r\n      height = 60,\r\n      width = 50,\r\n      rowHeight = 10,\r\n      positions = 0,\r\n      renders = 0,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  Ember.subscribe(\"view.updateContext.render\", {\r\n    before: function(){},\r\n    after: function(name, timestamp, payload) {\r\n      renders++;\r\n    }\r\n  });\r\n\r\n  Ember.subscribe(\"view.updateContext.positionElement\", {\r\n    before: function(){},\r\n    after: function(name, timestamp, payload) {\r\n      positions++;\r\n    }\r\n  });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    width: width,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(renders, 7, \"The correct number of renders occured\");\r\n  equal(positions, 14, \"The correct number of positions occured\");\r\n});\r\n\r\ntest(\"should perform correct number of renders and repositions while short list scrolling\", function () {\r\n  var content = helper.generateContent(8),\r\n      height = 60,\r\n      width = 50,\r\n      scrollTop = 50,\r\n      rowHeight = 10,\r\n      positions = 0,\r\n      renders = 0,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  if (window.console) {\r\n    Ember.ENABLE_PROFILING = true;\r\n  }\r\n\r\n  Ember.subscribe(\"view.updateContext.render\", {\r\n    before: function(){},\r\n    after: function(name, timestamp, payload) {\r\n      renders++;\r\n    }\r\n  });\r\n\r\n  Ember.subscribe(\"view.updateContext.positionElement\", {\r\n    before: function(){},\r\n    after: function(name, timestamp, payload) {\r\n      positions++;\r\n    }\r\n  });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    width: width,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function () {\r\n    view.scrollTo(scrollTop);\r\n  });\r\n\r\n  equal(renders, 14, \"The correct number of renders occured\");\r\n  equal(positions, 21, \"The correct number of positions occured\");\r\n});\r\n\r\ntest(\"should perform correct number of renders and repositions on long list init\", function () {\r\n  var content = helper.generateContent(200),\r\n      height = 50,\r\n      width = 50,\r\n      rowHeight = 10,\r\n      positions = 0,\r\n      renders = 0,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  Ember.subscribe(\"view.updateContext.render\", {\r\n    before: function(){},\r\n    after: function(name, timestamp, payload) {\r\n      renders++;\r\n    }\r\n  });\r\n\r\n  Ember.subscribe(\"view.updateContext.positionElement\", {\r\n    before: function(){},\r\n    after: function(name, timestamp, payload) {\r\n      positions++;\r\n    }\r\n  });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    width: width,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(renders, ((height / 10) + 1),  \"The correct number of renders occurred\");\r\n  equal(positions, 12, \"The correct number of positions occurred\");\r\n});\r\n\r\ntest(\"should be programatically scrollable\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(475);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950], \"The rows are in the correct positions\");\r\n});\r\n\r\nfunction yPosition(position){\r\n  return position.y;\r\n}\r\n\r\nfunction xPosition(position){\r\n  return position.x;\r\n}\r\n\r\ntest(\"height change\", function(){\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500], \"The rows are in the correct positions\");\r\n\r\n  Ember.run(function() {\r\n    view.set(\'height\', 100);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100], \"The rows are in the correct positions\");\r\n\r\n  Ember.run(function() {\r\n    view.set(\'height\', 50);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50], \"The rows are in the correct positions\");\r\n\r\n  Ember.run(function() {\r\n    view.set(\'height\', 100);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100], \"The rows are in the correct positions\" );\r\n});\r\n\r\ntest(\"adding a column, when everything is already within viewport\", function(){\r\n  // start off with 2x3 grid visible and 4 elements\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element, ?: no element\r\n  //\r\n  // x x  --|\r\n  // x x    |- viewport\r\n  // ? ?  --|\r\n  var content = helper.generateContent(4),\r\n      width = 100,\r\n      height = 150,\r\n      rowHeight = 50,\r\n      elementWidth = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\r\n        NestedViewClass: Ember.View.extend({\r\n          tagName: \'span\',\r\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\r\n        })\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    width: width,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    elementWidth: elementWidth,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0\r\n  });\r\n\r\n  appendView();\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:  0, y:    0 }, { x: 50, y:    0 },\r\n            { x:  0, y:   50 }, { x: 50, y:   50 }\r\n            ], \"initial render: The rows are rendered in the correct positions\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 4, \"initial render: The correct number of rows were rendered\");\r\n\r\n  // rotate to a with 3x2 grid visible and 8 elements\r\n  // rapid dimension changes\r\n  Ember.run(function() {\r\n    view.set(\'width\',  140);\r\n  });\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\',  150);\r\n  });\r\n\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // x x x --|\r\n  // x ? ?   |- viewport\r\n  // ? ? ? --|\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 4, \"after width + height change: the correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:  0, y:  0 }, { x: 50, y: 0 }, { x: 100, y: 0 },\r\n            { x:  0, y: 50 }\r\n            ], \"after width + height change: The rows are in the correct positions\");\r\n\r\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\r\n  deepEqual(texts, [\r\n             \'A:Item 1B:Item 1\',\r\n             \'A:Item 2B:Item 2\',\r\n             \'A:Item 3B:Item 3\',\r\n             \'A:Item 4B:Item 4\'\r\n            ], \'after width + height change: elements should be rendered in expected position\');\r\n});\r\n\r\ntest(\"height and width change after with scroll – simple\", function(){\r\n  // start off with 2x3 grid visible and 10 elements, at top of scroll\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // x x  --|\r\n  // x x    |- viewport\r\n  // x x  --|\r\n  // + +\r\n  // 0 0\r\n  var content = helper.generateContent(10),\r\n      width = 100,\r\n      height = 150,\r\n      rowHeight = 50,\r\n      elementWidth = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\r\n        NestedViewClass: Ember.View.extend({\r\n          tagName: \'span\',\r\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\r\n        })\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    width: width,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    elementWidth: elementWidth,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0\r\n  });\r\n\r\n  appendView();\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:  0, y:    0 }, { x: 50, y:    0 },\r\n            { x:  0, y:   50 }, { x: 50, y:   50 },\r\n            { x:  0, y:  100 }, { x: 50, y:  100 },\r\n            { x:  0, y:  150 }, { x: 50, y:  150 }\r\n            ], \"initial render: The rows are rendered in the correct positions\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"initial render: The correct number of rows were rendered\");\r\n\r\n  // user is scrolled near the bottom of the list\r\n  Ember.run(function(){\r\n    view.scrollTo(101);\r\n  });\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // 0 0\r\n  // o o\r\n  // x x --|\r\n  // x x   |- viewport\r\n  // x x --|\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"after scroll: The correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n              { x: 0, y:  50 }, { x: 50, y:  50 },\r\n              { x: 0, y: 100 }, { x: 50, y: 100 },\r\n              { x: 0, y: 150 }, { x: 50, y: 150 },\r\n/* padding */ { x: 0, y: 200 }, { x: 50, y: 200 }], \"after scroll: The rows are in the correct positions\");\r\n\r\n  // rotate to a with 3x2 grid visible and 8 elements\r\n  Ember.run(function() {\r\n    view.set(\'width\',  150);\r\n    view.set(\'height\', 100);\r\n  });\r\n\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // 0 0 0\r\n  // x x x\r\n  // x x x --|\r\n  // x o o --|- viewport\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 9, \"after width + height change: the correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    /*              */  { x:  50, y:   0 }, { x: 100, y:   0 },\r\n    { x:   0, y:  50 }, { x:  50, y:  50 }, { x: 100, y:  50 },\r\n    { x:   0, y: 100 }, { x:  50, y: 100 }, { x: 100, y: 100 },\r\n    { x:   0, y: 150 }], \"after width + height change: The rows are in the correct positions\");\r\n\r\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\r\n  deepEqual(texts, [\r\n    \'A:Item 2B:Item 2\',\r\n    \'A:Item 3B:Item 3\',\r\n    \'A:Item 4B:Item 4\',\r\n    \'A:Item 5B:Item 5\',\r\n    \'A:Item 6B:Item 6\',\r\n    \'A:Item 7B:Item 7\',\r\n    \'A:Item 8B:Item 8\',\r\n    \'A:Item 9B:Item 9\',\r\n    \'A:Item 10B:Item 10\',\r\n  ], \'after width + height change: elements should be rendered in expected position\');\r\n});\r\n\r\ntest(\"height and width change after with scroll – 1x2 -> 2x2 with 5 items\", function(){\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // x  --|\r\n  // x  --|- viewport\r\n  // +\r\n  // 0\r\n  // 0\r\n  var content = helper.generateContent(5),\r\n      width = 50,\r\n      height = 100,\r\n      rowHeight = 50,\r\n      elementWidth = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\r\n        NestedViewClass: Ember.View.extend({\r\n          tagName: \'span\',\r\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\r\n        })\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    width: width,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    elementWidth: elementWidth,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0\r\n  });\r\n\r\n  appendView();\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:  0, y:    0 },\r\n            { x:  0, y:   50 },\r\n            { x:  0, y:  100 }\r\n            ], \"initial render: The rows are rendered in the correct positions\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"initial render: The correct number of rows were rendered\");\r\n\r\n  // user is scrolled near the bottom of the list\r\n  Ember.run(function(){\r\n    view.scrollTo(151);\r\n  });\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // 0\r\n  // 0\r\n  // o\r\n  // x --|\r\n  // x --|- viewport\r\n  // 0\r\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"after scroll: The correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n              { x: 0, y: 100 },\r\n              { x: 0, y: 150 },\r\n/* padding */ { x: 0, y: 200 }], \"after scroll: The rows are in the correct positions\");\r\n\r\n  // rotate to a with 2x2 grid visible and 8 elements\r\n  Ember.run(function() {\r\n    view.set(\'width\',  100);\r\n    view.set(\'height\', 100);\r\n  });\r\n\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // 0 0\r\n  // x x --|\r\n  // x o --|- viewport\r\n  // o\r\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"after width + height change: the correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x: 0, y:   0 }, { x: 50, y:   0 },\r\n    { x: 0, y:  50 }, { x: 50, y:  50 },\r\n    { x: 0, y: 100 }\r\n  ], \"The rows are in the correct positions\");\r\n\r\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\r\n\r\n  deepEqual(texts, [\r\n    \'A:Item 1B:Item 1\', \'A:Item 2B:Item 2\',\r\n    \'A:Item 3B:Item 3\', \'A:Item 4B:Item 4\',\r\n    \'A:Item 5B:Item 5\'\r\n  ], \'elements should be rendered in expected position\');\r\n});\r\n\r\ntest(\"elementWidth change\", function(){\r\n  var i,\r\n      positionSorted,\r\n      content = helper.generateContent(100),\r\n      height = 200,\r\n      width = 200,\r\n      rowHeight = 50,\r\n      elementWidth = 100,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    width: width,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    elementWidth: elementWidth\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 0   },\r\n            { x:100, y: 0   },\r\n            { x:0,   y: 50  },\r\n            { x:100, y: 50  },\r\n            { x:0 ,  y: 100 },\r\n            { x:100, y: 100 },\r\n            { x:0,   y: 150 },\r\n            { x:100, y: 150 },\r\n            { x:0,   y: 200 },\r\n            { x:100, y: 200 }], \"The rows are in the correct positions\");\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  for(i = 0; i < 10; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\r\n  }\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\', 100);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"The correct number of rows were rendered\");\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x: 0, y: 0},\r\n            { x: 0, y: 50},\r\n            { x: 0, y: 100},\r\n            { x: 0, y: 150},\r\n            { x: 0, y: 200}\r\n  ], \"The rows are in the correct positions\");\r\n\r\n  for(i = 0; i < 5; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\r\n  }\r\n\r\n  // Test a width smaller than elementWidth, should behave the same as width === elementWidth\r\n  Ember.run(function () {\r\n    view.set(\'width\', 50);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"The correct number of rows were rendered\");\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x: 0, y: 0},\r\n            { x: 0, y: 50},\r\n            { x: 0, y: 100},\r\n            { x: 0, y: 150},\r\n            { x: 0, y: 200}\r\n  ], \"The rows are in the correct positions\");\r\n\r\n  for(i = 0; i < 5; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\r\n  }\r\n\r\n  ok(view.$().is(\'.ember-list-view-list\'), \'has correct list related class\');\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\', 200);\r\n  });\r\n\r\n  ok(view.$().is(\'.ember-list-view-grid\'), \'has correct grid related class\');\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 0   },\r\n            { x:100, y: 0   },\r\n            { x:0,   y: 50  },\r\n            { x:100, y: 50  },\r\n            { x:0 ,  y: 100 },\r\n            { x:100, y: 100 },\r\n            { x:0,   y: 150 },\r\n            { x:100, y: 150 },\r\n            { x:0,   y: 200 },\r\n            { x:100, y: 200 }], \"The rows are in the correct positions\");\r\n\r\n  for(i = 0; i < 10; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\r\n  }\r\n});\r\n\r\ntest(\"elementWidth change with scroll\", function(){\r\n  var i,\r\n      positionSorted,\r\n      content = helper.generateContent(100),\r\n      height = 200,\r\n      width = 200,\r\n      rowHeight = 50,\r\n      elementWidth = 100,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    width: width,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    elementWidth: elementWidth\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function(){\r\n    view.scrollTo(1000);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"after scroll 1000 - The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 1000 },\r\n            { x:100, y: 1000 },\r\n            { x:0,   y: 1050 },\r\n            { x:100, y: 1050 },\r\n            { x:0 ,  y: 1100 },\r\n            { x:100, y: 1100 },\r\n            { x:0,   y: 1150 },\r\n            { x:100, y: 1150 },\r\n            { x:0,   y: 1200 },\r\n            { x:100, y: 1200 }], \"after scroll 1000 - The rows are in the correct positions\");\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  for (i = 0; i < 10; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\r\n  }\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\', 100);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 5, \" after width 100 -The correct number of rows were rendered\");\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 2000 },\r\n            { x:0,   y: 2050 },\r\n            { x:0 ,  y: 2100 },\r\n            { x:0,   y: 2150 },\r\n            { x:0,   y: 2200 }], \"after width 100 - The rows are in the correct positions\");\r\n\r\n  for(i = 0; i < 5; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\r\n  }\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\', 200);\r\n  });\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"after width 200 - The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 1000 },\r\n            { x:100, y: 1000 },\r\n            { x:0,   y: 1050 },\r\n            { x:100, y: 1050 },\r\n            { x:0 ,  y: 1100 },\r\n            { x:100, y: 1100 },\r\n            { x:0,   y: 1150 },\r\n            { x:100, y: 1150 },\r\n            { x:0,   y: 1200 },\r\n            { x:100, y: 1200 }], \"after width 200 - The rows are in the correct positions\");\r\n\r\n  for(i = 0; i < 10; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\r\n  }\r\n});\r\n\r\ntest(\"A property of an item can be changed\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  //Change name\r\n  Ember.run(function() {\r\n    content.set(\'0.name\', \'First change\');\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view:eq(0)\').text(), \"First change\", \"The item\'s name has been updated\");\r\n\r\n  //Scroll down, change name, and scroll back up\r\n  Ember.run(function() {\r\n    view.scrollTo(600);\r\n  });\r\n\r\n  Ember.run(function() {\r\n    content.set(\'0.name\', \'Second change\');\r\n  });\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(0);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view:eq(0)\').text(), \"Second change\", \"The item\'s name has been updated\");\r\n\r\n});\r\n\r\ntest(\"The list view is wrapped in an extra div to support JS-emulated scrolling\", function() {\r\n  view = Ember.ListView.create({\r\n    content: Ember.A(),\r\n    height: 100,\r\n    rowHeight: 50\r\n  });\r\n\r\n  appendView();\r\n  equal(view.$(\'.ember-list-container\').length, 1, \"expected a ember-list-container wrapper div\");\r\n  equal(view.$(\'.ember-list-container > .ember-list-item-view\').length, 0, \"expected ember-list-items inside the wrapper div\");\r\n});\r\n\r\ntest(\"When scrolled past the totalHeight, views should not be recycled in. This is to support overscroll\", function() {\r\n  view = Ember.ListView.create({\r\n    content: helper.generateContent(2),\r\n    height:100,\r\n    rowHeight: 50,\r\n    itemViewClass: Ember.ListItemView.extend({\r\n      template: Ember.Handlebars.compile(\"Name: {{name}}\")\r\n    })\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function(){\r\n    view.scrollTo(150);\r\n  });\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"after width 200 - The correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0, y:  0 },\r\n            { x:0, y: 50 }] , \"went beyond scroll max via overscroll\");\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Name: Item \" + 1);\r\n  equal(Ember.$(positionSorted[1]).text(), \"Name: Item \" + 2);\r\n});\r\n\r\n\r\ntest(\"When list-view is unable to scroll, scrollTop should be zero\", function() {\r\n  view = Ember.ListView.create({\r\n    content: helper.generateContent(2),\r\n    height:400,\r\n    rowHeight: 100,\r\n    itemViewClass: Ember.ListItemView.extend({\r\n      template: Ember.Handlebars.compile(\"Name: {{name}}\")\r\n    })\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function(){\r\n    view.scrollTo(1);\r\n  });\r\n\r\n  equal(view.get(\'scrollTop\'), 0, \"Scrolltop should be zero\");\r\n\r\n});\r\n\r\n\r\ntest(\"Creating a ListView without height and rowHeight properties should throw an exception\", function() {\r\n  throws(function() {\r\n    view = Ember.ListView.create({\r\n      content: helper.generateContent(4)\r\n    });\r\n\r\n    appendView();\r\n  },\r\n  /A ListView must be created with a height and a rowHeight./, \"Throws exception.\");\r\n});\r\n\r\ntest(\"Creating a ListView without height and rowHeight properties should throw an exception\", function() {\r\n  throws(function() {\r\n    view = Ember.ListView.create({\r\n      content: helper.generateContent(4)\r\n    });\r\n\r\n    appendView();\r\n  },\r\n  /A ListView must be created with a height and a rowHeight./, \"Throws exception.\");\r\n});\r\n\r\ntest(\"should trigger scrollYChanged correctly\", function () {\r\n  var scrollYChanged = 0, reuseChildren = 0;\r\n\r\n  view = Ember.ListView.extend({\r\n    init: function () {\r\n      this.on(\'scrollYChanged\', function () {\r\n        scrollYChanged++;\r\n      });\r\n      this._super();\r\n    },\r\n    _reuseChildren: function () {\r\n      reuseChildren++;\r\n      this._super();\r\n    }\r\n  }).create({\r\n    content: helper.generateContent(10),\r\n    height: 100,\r\n    rowHeight: 50\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(scrollYChanged, 0, \'scrollYChanged should not fire on init\');\r\n\r\n  Ember.run(function () {\r\n    view.scrollTo(1);\r\n  });\r\n\r\n  equal(scrollYChanged, 1, \'scrollYChanged should fire after scroll\');\r\n\r\n  Ember.run(function () {\r\n    view.scrollTo(1);\r\n  });\r\n\r\n  equal(scrollYChanged, 1, \'scrollYChanged should not fire for same value\');\r\n});\r\n\r\ntest(\"should trigger reuseChildren correctly\", function () {\r\n  var scrollYChanged = 0, reuseChildren = 0;\r\n\r\n  view = Ember.ListView.extend({\r\n    _reuseChildren: function () {\r\n      reuseChildren++;\r\n      this._super();\r\n    }\r\n  }).create({\r\n    content: helper.generateContent(10),\r\n    height: 100,\r\n    rowHeight: 50\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(reuseChildren, 1, \'initialize the content\');\r\n\r\n  Ember.run(function () {\r\n    view.scrollTo(1);\r\n  });\r\n\r\n  equal(reuseChildren, 1, \'should not update the content\');\r\n\r\n  Ember.run(function () {\r\n    view.scrollTo(51);\r\n  });\r\n\r\n  equal(reuseChildren, 2, \'should update the content\');\r\n});\r\n\r\ntest(\"handle strange ratios between height/rowHeight\", function() {\r\n  view = Ember.ListView.create({\r\n    content: helper.generateContent(15),\r\n    height: 235,\r\n    rowHeight: 73,\r\n    itemViewClass: Ember.ListItemView.extend({\r\n      template: Ember.Handlebars.compile(\"Name: {{name}}\")\r\n    })\r\n  });\r\n\r\n  appendView();\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 5);\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y:   0 },\r\n    { x:0, y:  73 },\r\n    { x:0, y: 146 },\r\n    { x:0, y: 219 },\r\n    { x:0, y: 292 }\r\n  ] , \"went beyond scroll max via overscroll\");\r\n\r\n  var i;\r\n  for (i = 0; i < positionSorted.length; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Name: Item \" + (i + 1));\r\n  }\r\n\r\n  Ember.run(view, \'scrollTo\', 1000);\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 5);\r\n\r\n  // expected\r\n  // -----\r\n  // 0   |\r\n  // 1   |\r\n  // 2   |\r\n  // 3   |\r\n  // 4   | <--- not rendered\r\n  // 5   |\r\n  // 6   |\r\n  // 7   |\r\n  // 8   |\r\n  // 9   |\r\n  // ----\r\n  // 10  | <- buffer\r\n  // ----\r\n  // 11  | <-- partially visible\r\n  // 12  | <--- visible\r\n  // 13  |\r\n  // 14  |\r\n  // ----\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y:  730 }, // <-- buffer\r\n    { x:0, y:  803 }, // <-- partially visible\r\n    { x:0, y:  876 }, // <-- in view\r\n    { x:0, y:  949 }, // <-- in view\r\n    { x:0, y: 1022 }  // <-- in view\r\n  ], \"went beyond scroll max via overscroll\");\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Name: Item 11\");\r\n  equal(Ember.$(positionSorted[1]).text(), \"Name: Item 12\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Name: Item 13\");\r\n  equal(Ember.$(positionSorted[3]).text(), \"Name: Item 14\");\r\n  equal(Ember.$(positionSorted[4]).text(), \"Name: Item 15\");\r\n});\r\n\r\ntest(\"handle bindable rowHeight\", function() {\r\n  view = Ember.ListView.create({\r\n    content: helper.generateContent(15),\r\n    height: 400,\r\n    rowHeight: 100,\r\n    itemViewClass: Ember.ListItemView.extend({\r\n      template: Ember.Handlebars.compile(\"Name: {{name}}\")\r\n    })\r\n  });\r\n\r\n  appendView();\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 5);\r\n  equal(view.get(\'totalHeight\'), 1500);\r\n\r\n  // expected\r\n  // -----\r\n  // 0   |\r\n  // 1   |\r\n  // 2   |\r\n  // 3   |\r\n  // -----\r\n  // 4   | <--- buffer\r\n  // -----\r\n  // 5   |\r\n  // 6   |\r\n  // 7   |\r\n  // 8   |\r\n  // 9   |\r\n  // 10  |\r\n  // 11  |\r\n  // 12  |\r\n  // 13  |\r\n  // 14  |\r\n  // -----\r\n  //\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y:   0 }, // <- visible\r\n    { x:0, y: 100 }, // <- visible\r\n    { x:0, y: 200 }, // <- visible\r\n    { x:0, y: 300 }, // <- visible\r\n    { x:0, y: 400 }  // <- buffer\r\n  ] , \"inDOM views are correctly positioned: before rowHeight change\");\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Name: Item 1\");\r\n  equal(Ember.$(positionSorted[1]).text(), \"Name: Item 2\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Name: Item 3\");\r\n  equal(Ember.$(positionSorted[3]).text(), \"Name: Item 4\");\r\n\r\n  Ember.run(view, \'set\', \'rowHeight\', 200);\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 3);\r\n  equal(view.get(\'totalHeight\'), 3000);\r\n\r\n  // expected\r\n  // -----\r\n  // 0   |\r\n  // 1   |\r\n  // ----|\r\n  // 2   | <--- buffer\r\n  // ----|\r\n  // 3   |\r\n  // 4   |\r\n  // 5   |\r\n  // 6   |\r\n  // 7   |\r\n  // 8   |\r\n  // 9   |\r\n  // 10  |\r\n  // 11  |\r\n  // 12  |\r\n  // 13  |\r\n  // 14  |\r\n  // -----\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y:    0 }, // <-- visible\r\n    { x:0, y:  200 }, // <-- visible\r\n    { x:0, y:  400 }, // <-- buffer\r\n  ], \"inDOM views are correctly positioned: after rowHeight change\");\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Name: Item 1\");\r\n  equal(Ember.$(positionSorted[1]).text(), \"Name: Item 2\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Name: Item 3\");\r\n});\r\n})();//@ sourceURL=list_view_test.js");

eval("(function() {var css, view, helper;\r\nhelper = window.helper;\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.ListView - Multi-height\", {\r\n  setup: function() {\r\n    css = Ember.$(\"<style>\" +\r\n            \".ember-list-view {\" +\r\n            \"  overflow: auto;\" +\r\n            \"  position: relative;\" +\r\n            \"}\" +\r\n            \".ember-list-item-view {\" +\r\n            \"  position: absolute;\" +\r\n            \"}\" +\r\n            \".is-selected {\" +\r\n            \"  background: red;\" +\r\n            \"}\" +\r\n            \"</style>\").appendTo(\'head\');\r\n  },\r\n  teardown: function() {\r\n    css.remove();\r\n\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n\r\n    Ember.ENABLE_PROFILING = false;\r\n  }\r\n});\r\n\r\ntest(\"Correct height based on content\", function() {\r\n  var content = [\r\n    { id:  1, type: \"cat\",   height: 100, name: \"Andrew\" },\r\n    { id:  3, type: \"cat\",   height: 100, name: \"Bruce\" },\r\n    { id:  4, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id:  5, type: \"dog\",   height:  50, name: \"Caroline\" },\r\n    { id:  6, type: \"cat\",   height: 100, name: \"David\" },\r\n    { id:  7, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id:  8, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id:  9, type: \"dog\",   height:  50, name: \"Edward\" },\r\n    { id: 10, type: \"dog\",   height:  50, name: \"Francis\" },\r\n    { id: 11, type: \"dog\",   height:  50, name: \"George\" },\r\n    { id: 12, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 13, type: \"dog\",   height:  50, name: \"Harry\" },\r\n    { id: 14, type: \"cat\",   height: 100, name: \"Ingrid\" },\r\n    { id: 15, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 16, type: \"cat\",   height: 100, name: \"Jenn\" },\r\n    { id: 17, type: \"cat\",   height: 100, name: \"Kelly\" },\r\n    { id: 18, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 19, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 20, type: \"cat\",   height: 100, name: \"Larry\" },\r\n    { id: 21, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 22, type: \"cat\",   height: 100, name: \"Manny\" },\r\n    { id: 23, type: \"dog\",   height:  50, name: \"Nathan\" },\r\n    { id: 24, type: \"cat\",   height: 100, name: \"Ophelia\" },\r\n    { id: 25, type: \"dog\",   height:  50, name: \"Patrick\" },\r\n    { id: 26, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 27, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 28, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 29, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 30, type: \"other\", height: 150, name: \"Xbar\" },\r\n    { id: 31, type: \"cat\",   height: 100, name: \"Quincy\" },\r\n    { id: 32, type: \"dog\",   height:  50, name: \"Roger\" },\r\n  ];\r\n\r\n  view = Ember.ListView.create({\r\n    content: Em.A(content),\r\n    height: 300,\r\n    width: 500,\r\n    rowHeight: 100,\r\n    itemViews: {\r\n      cat: Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"Meow says {{name}} expected: cat === {{type}} {{id}}\")\r\n      }),\r\n      dog: Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"Woof says {{name}} expected: dog === {{type}} {{id}}\")\r\n      }),\r\n      other: Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\r\n      })\r\n    },\r\n    itemViewForIndex: function(idx) {\r\n      return this.itemViews[Ember.A(this.get(\'content\')).objectAt(idx).type];\r\n    },\r\n    heightForIndex: function(idx) {\r\n      return Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'height\');\r\n    }\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.get(\'totalHeight\'), 3350);\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 4);\r\n\r\n  var i, contentIdx;\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Meow says Andrew expected: cat === cat 1\");\r\n  equal(Ember.$(positionSorted[1]).text(), \"Meow says Bruce expected: cat === cat 3\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Potato says Xbar expected: other === other 4\");\r\n  equal(Ember.$(positionSorted[3]).text(), \"Woof says Caroline expected: dog === dog 5\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y:    0 }, // <-- in view\r\n    { x:0, y:  100 }, // <-- in view\r\n    { x:0, y:  200 }, // <-- in view\r\n    { x:0, y:  350 }  // <-- buffer\r\n  ], \'went beyond scroll max via overscroll\');\r\n\r\n  Ember.run(view, \'scrollTo\', 1000);\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Potato says Xbar expected: other === other 12\");\r\n  equal(Ember.$(positionSorted[1]).text(), \"Woof says Harry expected: dog === dog 13\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Meow says Ingrid expected: cat === cat 14\");\r\n  equal(Ember.$(positionSorted[3]).text(), \"Potato says Xbar expected: other === other 15\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y: 950 }, // <-- partially in view\r\n    { x:0, y: 1100 }, // <-- in view\r\n    { x:0, y: 1150 }, // <-- in view\r\n    { x:0, y: 1250 }  // <-- partially in view\r\n  ], \'went beyond scroll max via overscroll\');\r\n});\r\n\r\ntest(\"Correct height based on view\", function() {\r\n  var content = [\r\n    { id:  1, type: \"cat\",   name: \"Andrew\" },\r\n    { id:  3, type: \"cat\",   name: \"Bruce\" },\r\n    { id:  4, type: \"other\", name: \"Xbar\" },\r\n    { id:  5, type: \"dog\",   name: \"Caroline\" },\r\n    { id:  6, type: \"cat\",   name: \"David\" },\r\n    { id:  7, type: \"other\", name: \"Xbar\" },\r\n    { id:  8, type: \"other\", name: \"Xbar\" },\r\n    { id:  9, type: \"dog\",   name: \"Edward\" },\r\n    { id: 10, type: \"dog\",   name: \"Francis\" },\r\n    { id: 11, type: \"dog\",   name: \"George\" },\r\n    { id: 12, type: \"other\", name: \"Xbar\" },\r\n    { id: 13, type: \"dog\",   name: \"Harry\" },\r\n    { id: 14, type: \"cat\",   name: \"Ingrid\" },\r\n    { id: 15, type: \"other\", name: \"Xbar\" },\r\n    { id: 16, type: \"cat\",   name: \"Jenn\" },\r\n    { id: 17, type: \"cat\",   name: \"Kelly\" },\r\n    { id: 18, type: \"other\", name: \"Xbar\" },\r\n    { id: 19, type: \"other\", name: \"Xbar\" },\r\n    { id: 20, type: \"cat\",   name: \"Larry\" },\r\n    { id: 21, type: \"other\", name: \"Xbar\" },\r\n    { id: 22, type: \"cat\",   name: \"Manny\" },\r\n    { id: 23, type: \"dog\",   name: \"Nathan\" },\r\n    { id: 24, type: \"cat\",   name: \"Ophelia\" },\r\n    { id: 25, type: \"dog\",   name: \"Patrick\" },\r\n    { id: 26, type: \"other\", name: \"Xbar\" },\r\n    { id: 27, type: \"other\", name: \"Xbar\" },\r\n    { id: 28, type: \"other\", name: \"Xbar\" },\r\n    { id: 29, type: \"other\", name: \"Xbar\" },\r\n    { id: 30, type: \"other\", name: \"Xbar\" },\r\n    { id: 31, type: \"cat\",   name: \"Quincy\" },\r\n    { id: 32, type: \"dog\",   name: \"Roger\" },\r\n  ];\r\n\r\n  view = Ember.ListView.create({\r\n    content: Em.A(content),\r\n    height: 300,\r\n    width: 500,\r\n    rowHeight: 100,\r\n    itemViews: {\r\n      cat: Ember.ListItemView.extend({\r\n        rowHeight: 100,\r\n        template: Ember.Handlebars.compile(\"Meow says {{name}} expected: cat === {{type}} {{id}}\")\r\n      }),\r\n      dog: Ember.ListItemView.extend({\r\n        rowHeight: 50,\r\n        template: Ember.Handlebars.compile(\"Woof says {{name}} expected: dog === {{type}} {{id}}\")\r\n      }),\r\n      other: Ember.ListItemView.extend({\r\n        rowHeight: 150,\r\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\r\n      })\r\n    },\r\n    itemViewForIndex: function(idx){\r\n      return this.itemViews[Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'type\')];\r\n    },\r\n    heightForIndex: function(idx) {\r\n      // proto() is a quick hack, lets just store this on the class..\r\n      return this.itemViewForIndex(idx).proto().rowHeight;\r\n    }\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.get(\'totalHeight\'), 3350);\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 4);\r\n\r\n  var i, contentIdx;\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Meow says Andrew expected: cat === cat 1\");\r\n  equal(Ember.$(positionSorted[1]).text(), \"Meow says Bruce expected: cat === cat 3\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Potato says Xbar expected: other === other 4\");\r\n  equal(Ember.$(positionSorted[3]).text(), \"Woof says Caroline expected: dog === dog 5\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y:    0 }, // <-- in view\r\n    { x:0, y:  100 }, // <-- in view\r\n    { x:0, y:  200 }, // <-- in view\r\n    { x:0, y:  350 }  // <-- buffer\r\n  ], \'went beyond scroll max via overscroll\');\r\n\r\n  Ember.run(view, \'scrollTo\', 1000);\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Potato says Xbar expected: other === other 12\");\r\n  equal(Ember.$(positionSorted[1]).text(), \"Woof says Harry expected: dog === dog 13\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Meow says Ingrid expected: cat === cat 14\");\r\n  equal(Ember.$(positionSorted[3]).text(), \"Potato says Xbar expected: other === other 15\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y:  950 }, // <-- partially in view\r\n    { x:0, y: 1100 }, // <-- in view\r\n    { x:0, y: 1150 }, // <-- in view\r\n    { x:0, y: 1250 }  // <-- partially in view\r\n  ], \'went beyond scroll max via overscroll\');\r\n});\r\n\r\n\r\n\r\n\r\ntest(\"_numChildViewsForViewport + _startingIndex with multi-height\", function() {\r\n  var content = [\r\n    { id:  1, type: \"cat\",   name: \"Andrew\" },\r\n    { id:  3, type: \"cat\",   name: \"Bruce\" },\r\n    { id:  4, type: \"other\", name: \"Xbar\" },\r\n    { id:  5, type: \"dog\",   name: \"Caroline\" },\r\n    { id:  6, type: \"cat\",   name: \"David\" },\r\n    { id:  7, type: \"other\", name: \"Xbar\" },\r\n    { id:  8, type: \"other\", name: \"Xbar\" },\r\n    { id:  9, type: \"dog\",   name: \"Edward\" },\r\n    { id: 10, type: \"dog\",   name: \"Francis\" },\r\n    { id: 11, type: \"dog\",   name: \"George\" },\r\n    { id: 12, type: \"other\", name: \"Xbar\" },\r\n    { id: 13, type: \"dog\",   name: \"Harry\" },\r\n    { id: 14, type: \"cat\",   name: \"Ingrid\" },\r\n    { id: 15, type: \"other\", name: \"Xbar\" },\r\n    { id: 16, type: \"cat\",   name: \"Jenn\" },\r\n    { id: 17, type: \"cat\",   name: \"Kelly\" },\r\n    { id: 18, type: \"other\", name: \"Xbar\" },\r\n    { id: 19, type: \"other\", name: \"Xbar\" },\r\n    { id: 20, type: \"cat\",   name: \"Larry\" },\r\n    { id: 21, type: \"other\", name: \"Xbar\" },\r\n    { id: 22, type: \"cat\",   name: \"Manny\" },\r\n    { id: 23, type: \"dog\",   name: \"Nathan\" },\r\n    { id: 24, type: \"cat\",   name: \"Ophelia\" },\r\n    { id: 25, type: \"dog\",   name: \"Patrick\" },\r\n    { id: 26, type: \"other\", name: \"Xbar\" },\r\n    { id: 27, type: \"other\", name: \"Xbar\" },\r\n    { id: 28, type: \"other\", name: \"Xbar\" },\r\n    { id: 29, type: \"other\", name: \"Xbar\" },\r\n    { id: 30, type: \"other\", name: \"Xbar\" },\r\n    { id: 31, type: \"cat\",   name: \"Quincy\" },\r\n    { id: 32, type: \"dog\",   name: \"Roger\" },\r\n  ];\r\n\r\n  view = Ember.ListView.create({\r\n    content: Em.A(content),\r\n    height: 300,\r\n    width: 500,\r\n    rowHeight: 100,\r\n    itemViews: {\r\n      cat: Ember.ListItemView.extend({\r\n        rowHeight: 100,\r\n        template: Ember.Handlebars.compile(\"Meow says {{name}} expected: cat === {{type}} {{id}}\")\r\n      }),\r\n      dog: Ember.ListItemView.extend({\r\n        rowHeight: 50,\r\n        template: Ember.Handlebars.compile(\"Woof says {{name}} expected: dog === {{type}} {{id}}\")\r\n      }),\r\n      other: Ember.ListItemView.extend({\r\n        rowHeight: 150,\r\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\r\n      })\r\n    },\r\n    itemViewForIndex: function(idx){\r\n      return this.itemViews[Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'type\')];\r\n    },\r\n    heightForIndex: function(idx) {\r\n      // proto() is a quick hack, lets just store this on the class..\r\n      return this.itemViewForIndex(idx).proto().rowHeight;\r\n    }\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view._numChildViewsForViewport(), 4, \'expected _numChildViewsForViewport to be correct (before scroll)\');\r\n  equal(view._startingIndex(), 0, \'expected _startingIndex to be correct (before scroll)\');\r\n\r\n  // entries: 1, 3, 4, 5\r\n\r\n  Ember.run(view, \'scrollTo\', 1000);\r\n\r\n  // entries: 12, 13, 14, 15\r\n\r\n  equal(view._numChildViewsForViewport(), 5, \'expected _numChildViewsForViewport to be correct (after scroll)\');\r\n  equal(view._startingIndex(), 10, \'expected _startingIndex to be correct (after scroll)\');\r\n});\r\n\r\n\r\ntest(\"_cachedHeights is unique per instance\", function() {\r\n  var content = [ ];\r\n\r\n  var ParentClass = Ember.ListView.extend({\r\n    content: Em.A(content),\r\n    height: 300,\r\n    width: 500,\r\n    rowHeight: 100,\r\n    itemViews: {\r\n      other: Ember.ListItemView.extend({\r\n        rowHeight: 150,\r\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\r\n      })\r\n    },\r\n    itemViewForIndex: function(idx){\r\n      return this.itemViews[Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'type\')];\r\n    },\r\n    heightForIndex: function(idx) {\r\n      // proto() is a quick hack, lets just store this on the class..\r\n      return this.itemViewForIndex(idx).proto().rowHeight;\r\n    }\r\n  });\r\n\r\n  var viewA = ParentClass.create();\r\n  var viewB = ParentClass.create();\r\n\r\n  deepEqual(viewA._cachedHeights, viewB._cachedHeights);\r\n\r\n  viewA._cachedHeights.push(1);\r\n\r\n  equal(viewA._cachedHeights.length, 2);\r\n  equal(viewB._cachedHeights.length, 1, \'expected no addition cached heights, cache should not be shared between instances\');\r\n});\r\n\r\ntest(\"handle bindable rowHeight with multi-height (only fallback case)\", function() {\r\n  var content = [\r\n    { id:  1, type: \"cat\",   name: \"Andrew\" },\r\n    { id:  3, type: \"cat\",   name: \"Bruce\" },\r\n    { id:  4, type: \"other\", name: \"Xbar\" },\r\n    { id:  5, type: \"dog\",   name: \"Caroline\" },\r\n    { id:  6, type: \"cat\",   name: \"David\" },\r\n    { id:  7, type: \"other\", name: \"Xbar\" },\r\n    { id:  8, type: \"other\", name: \"Xbar\" },\r\n    { id:  9, type: \"dog\",   name: \"Edward\" },\r\n    { id: 10, type: \"dog\",   name: \"Francis\" },\r\n    { id: 11, type: \"dog\",   name: \"George\" },\r\n    { id: 12, type: \"other\", name: \"Xbar\" },\r\n    { id: 13, type: \"dog\",   name: \"Harry\" },\r\n    { id: 14, type: \"cat\",   name: \"Ingrid\" },\r\n    { id: 15, type: \"other\", name: \"Xbar\" },\r\n    { id: 16, type: \"cat\",   name: \"Jenn\" },\r\n    { id: 17, type: \"cat\",   name: \"Kelly\" },\r\n    { id: 18, type: \"other\", name: \"Xbar\" },\r\n    { id: 19, type: \"other\", name: \"Xbar\" },\r\n    { id: 20, type: \"cat\",   name: \"Larry\" },\r\n    { id: 21, type: \"other\", name: \"Xbar\" },\r\n    { id: 22, type: \"cat\",   name: \"Manny\" },\r\n    { id: 23, type: \"dog\",   name: \"Nathan\" },\r\n    { id: 24, type: \"cat\",   name: \"Ophelia\" },\r\n    { id: 25, type: \"dog\",   name: \"Patrick\" },\r\n    { id: 26, type: \"other\", name: \"Xbar\" },\r\n    { id: 27, type: \"other\", name: \"Xbar\" },\r\n    { id: 28, type: \"other\", name: \"Xbar\" },\r\n    { id: 29, type: \"other\", name: \"Xbar\" },\r\n    { id: 30, type: \"other\", name: \"Xbar\" },\r\n    { id: 31, type: \"cat\",   name: \"Quincy\" },\r\n    { id: 32, type: \"dog\",   name: \"Roger\" }\r\n  ];\r\n\r\n  view = Ember.ListView.create({\r\n    content: Em.A(content),\r\n    height: 300,\r\n    width: 500,\r\n    rowHeight: 100,\r\n    itemViews: {\r\n      other: Ember.ListItemView.extend({\r\n        rowHeight: 150,\r\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\r\n      })\r\n    },\r\n    itemViewForIndex: function(idx){\r\n      return this.itemViews[Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'type\')] || Ember.ReusableListItemView;\r\n    },\r\n\r\n    heightForIndex: function(idx) {\r\n      var view = this.itemViewForIndex(idx);\r\n\r\n     return view.proto().rowHeight || this.get(\'rowHeight\');\r\n    }\r\n  });\r\n\r\n  appendView();\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 4);\r\n  equal(view.get(\'totalHeight\'), 3750);\r\n\r\n  // expected\r\n  // -----\r\n  // 0   |\r\n  // 1   |\r\n  // 2   |\r\n  // -----\r\n  // 3   | <--- buffer\r\n  // -----\r\n  // 4   |\r\n  // 5   |\r\n  // 6   |\r\n  // 7   |\r\n  // 8   |\r\n  // 9   |\r\n  // 10  |\r\n  // 11  |\r\n  // 12  |\r\n  // 13  |\r\n  // 14  |\r\n  // -----\r\n  //\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y:   0 }, // <- visible\r\n    { x:0, y: 100 }, // <- visible\r\n    { x:0, y: 200 }, // <- visible\r\n    { x:0, y: 350 }, // <- buffer\r\n  ] , \"inDOM views are correctly positioned: before rowHeight change\");\r\n\r\n  Ember.run(view, \'set\', \'rowHeight\', 200);\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 3);\r\n  equal(view.get(\'totalHeight\'), 5550);\r\n\r\n  // expected\r\n  // -----\r\n  // 0   |\r\n  // 1   |\r\n  // ----|\r\n  // 2   | <--- buffer\r\n  // ----|\r\n  // 3   |\r\n  // 4   |\r\n  // 5   |\r\n  // 6   |\r\n  // 7   |\r\n  // 8   |\r\n  // 9   |\r\n  // 10  |\r\n  // 11  |\r\n  // 12  |\r\n  // 13  |\r\n  // 14  |\r\n  // -----\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y:    0 }, // <-- visible\r\n    { x:0, y:  200 }, // <-- visible\r\n    { x:0, y:  400 }, // <-- buffer\r\n  ], \"inDOM views are correctly positioned: after rowHeight change\");\r\n});\r\n})();//@ sourceURL=multi_height_list_view_test.js");

eval("(function() {var css, view, helper;\r\nhelper = window.helper;\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.ListView - Multi-height\", {\r\n  setup: function() {\r\n    css = Ember.$(\"<style>\" +\r\n            \".ember-list-view {\" +\r\n            \"  overflow: auto;\" +\r\n            \"  position: relative;\" +\r\n            \"}\" +\r\n            \".ember-list-item-view {\" +\r\n            \"  position: absolute;\" +\r\n            \"}\" +\r\n            \".is-selected {\" +\r\n            \"  background: red;\" +\r\n            \"}\" +\r\n            \"</style>\").appendTo(\'head\');\r\n  },\r\n  teardown: function() {\r\n    css.remove();\r\n\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n\r\n    Ember.ENABLE_PROFILING = false;\r\n  }\r\n});\r\n\r\ntest(\"Correct view is used for right data type\", function() {\r\n  var content = [\r\n    { id:  1, type: \"cat\",   name: \"Andrew\" },\r\n    { id:  3, type: \"cat\",   name: \"Bruce\" },\r\n    { id:  4, type: \"other\", name: \"Xbar\" },\r\n    { id:  5, type: \"dog\",   name: \"Caroline\" },\r\n    { id:  6, type: \"cat\",   name: \"David\" },\r\n    { id:  7, type: \"other\", name: \"Xbar\" },\r\n    { id:  8, type: \"other\", name: \"Xbar\" },\r\n    { id:  9, type: \"dog\",   name: \"Edward\" },\r\n    { id: 10, type: \"dog\",   name: \"Francis\" },\r\n    { id: 11, type: \"dog\",   name: \"George\" },\r\n    { id: 12, type: \"other\", name: \"Xbar\" },\r\n    { id: 13, type: \"dog\",   name: \"Harry\" },\r\n    { id: 14, type: \"cat\",   name: \"Ingrid\" },\r\n    { id: 15, type: \"other\", name: \"Xbar\" },\r\n    { id: 16, type: \"cat\",   name: \"Jenn\" },\r\n    { id: 17, type: \"cat\",   name: \"Kelly\" },\r\n    { id: 18, type: \"other\", name: \"Xbar\" },\r\n    { id: 19, type: \"other\", name: \"Xbar\" },\r\n    { id: 20, type: \"cat\",   name: \"Larry\" },\r\n    { id: 21, type: \"other\", name: \"Xbar\" },\r\n    { id: 22, type: \"cat\",   name: \"Manny\" },\r\n    { id: 23, type: \"dog\",   name: \"Nathan\" },\r\n    { id: 24, type: \"cat\",   name: \"Ophelia\" },\r\n    { id: 25, type: \"dog\",   name: \"Patrick\" },\r\n    { id: 26, type: \"other\", name: \"Xbar\" },\r\n    { id: 27, type: \"other\", name: \"Xbar\" },\r\n    { id: 28, type: \"other\", name: \"Xbar\" },\r\n    { id: 29, type: \"other\", name: \"Xbar\" },\r\n    { id: 30, type: \"other\", name: \"Xbar\" },\r\n    { id: 31, type: \"cat\",   name: \"Quincy\" },\r\n    { id: 32, type: \"dog\",   name: \"Roger\" },\r\n  ];\r\n\r\n  view = Ember.ListView.create({\r\n    content: Em.A(content),\r\n    height: 300,\r\n    width: 500,\r\n    rowHeight: 100,\r\n    itemViews: {\r\n      cat: Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"Meow says {{name}} expected: cat === {{type}} {{id}}\")\r\n      }),\r\n      dog: Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"Woof says {{name}} expected: dog === {{type}} {{id}}\")\r\n      }),\r\n      other: Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\r\n      })\r\n    },\r\n    itemViewForIndex: function(idx){\r\n      return this.itemViews[this.get(\'content\').objectAt(idx).type];\r\n    }\r\n  });\r\n\r\n  appendView();\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 4);\r\n\r\n  var i, contentIdx;\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Meow says Andrew expected: cat === cat 1\");\r\n  equal(Ember.$(positionSorted[1]).text(), \"Meow says Bruce expected: cat === cat 3\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Potato says Xbar expected: other === other 4\");\r\n  equal(Ember.$(positionSorted[3]).text(), \"Woof says Caroline expected: dog === dog 5\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x: 0, y:    0 }, // <-- in view\r\n    { x: 0, y:  100 }, // <-- in view\r\n    { x: 0, y:  200 }, // <-- in view\r\n    { x: 0, y:  300 }  // <-- buffer\r\n  ], \'went beyond scroll max via overscroll\');\r\n\r\n  Ember.run(view, \'scrollTo\', 1000);\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Potato says Xbar expected: other === other 12\");\r\n  equal(Ember.$(positionSorted[1]).text(), \"Woof says Harry expected: dog === dog 13\");\r\n  equal(Ember.$(positionSorted[2]).text(), \"Meow says Ingrid expected: cat === cat 14\");\r\n  equal(Ember.$(positionSorted[3]).text(), \"Potato says Xbar expected: other === other 15\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x:0, y: 1000 }, // <-- partially in view\r\n    { x:0, y: 1100 }, // <-- in view\r\n    { x:0, y: 1200 }, // <-- in view\r\n    { x:0, y: 1300 }  // <-- partially in view\r\n  ], \'went beyond scroll max via overscroll\');\r\n});\r\n})();//@ sourceURL=multi_view_list_view_test.js");

eval("(function() {var view, helper;\r\nhelper = window.helper;\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.ListView unit: - numOfChildViewsForViewport\", {\r\n  teardown: function() {\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n  }\r\n});\r\n\r\ntest(\"computing the number of child views to create with scrollTop zero\", function() {\r\n  view = Ember.ListView.create({\r\n    height: 500,\r\n    rowHeight: 50,\r\n    content: Ember.A()\r\n  });\r\n\r\n  equal(view._numChildViewsForViewport(), 11);\r\n});\r\n\r\ntest(\"computing the number of child views to create after when scroll down a bit\", function() {\r\n  view = Ember.ListView.create({\r\n    height: 500,\r\n    rowHeight: 50,\r\n    scrollTop: 51,\r\n    content: Ember.A()\r\n  });\r\n  equal(view._numChildViewsForViewport(), 11);\r\n});\r\n\r\n})();//@ sourceURL=num_of_child_views_for_viewport_test.js");

eval("(function() {var css, view, helper;\r\nhelper = window.helper;\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.ListView acceptance - View recycling\", {\r\n  setup: function() {\r\n    css = Ember.$(\"<style>\" +\r\n            \".ember-list-view {\" +\r\n            \"  overflow: auto;\" +\r\n            \"  position: relative;\" +\r\n            \"}\" +\r\n            \".ember-list-item-view {\" +\r\n            \"  position: absolute;\" +\r\n            \"}\" +\r\n            \".is-selected {\" +\r\n            \"  background: red;\" +\r\n            \"}\" +\r\n            \"</style>\").appendTo(\'head\');\r\n  },\r\n  teardown: function() {\r\n    css.remove();\r\n\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n  }\r\n});\r\n\r\ntest(\"recycling complex views long list\", function(){\r\n  var content = helper.generateContent(100),\r\n      height = 50,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        innerViewClass: Ember.View.extend({\r\n          didInsertElement: function(){\r\n            innerViewInsertionCount++;\r\n          },\r\n          willDestroyElement: function(){\r\n            innerViewDestroyCount++;\r\n          }\r\n        }),\r\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\r\n      });\r\n\r\n  var listViewInsertionCount, listViewDestroyCount,\r\n  innerViewInsertionCount, innerViewDestroyCount;\r\n\r\n  listViewInsertionCount = 0;\r\n  listViewDestroyCount = 0;\r\n\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0,\r\n    didInsertElement: function() {\r\n      listViewInsertionCount++;\r\n    },\r\n    willDestroyElement: function() {\r\n      listViewDestroyCount++;\r\n    }\r\n  });\r\n\r\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement\");\r\n\r\n  appendView();\r\n\r\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement\");\r\n\r\n  equal(innerViewInsertionCount, 2, \"expected number of innerView\'s didInsertElement\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\r\n\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(50);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\r\n\r\n  equal(innerViewInsertionCount, 1, \"expected number of innerView\'s didInsertElement\");\r\n  equal(innerViewDestroyCount, 1, \"expected number of innerView\'s willDestroyElement\");\r\n\r\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement\");\r\n\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(0);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\r\n\r\n  equal(innerViewInsertionCount, 1, \"expected number of innerView\'s didInsertElement\");\r\n  equal(innerViewDestroyCount, 1, \"expected number of innerView\'s willDestroyElement\");\r\n\r\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement\");\r\n\r\n});\r\n\r\ntest(\"recycling complex views short list\", function(){\r\n  var content = helper.generateContent(2),\r\n      height = 50,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        innerViewClass: Ember.View.extend({\r\n          didInsertElement: function(){\r\n            innerViewInsertionCount++;\r\n          },\r\n          willDestroyElement: function(){\r\n            innerViewDestroyCount++;\r\n          }\r\n        }),\r\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\r\n      });\r\n\r\n  var listViewInsertionCount, listViewDestroyCount,\r\n  innerViewInsertionCount, innerViewDestroyCount;\r\n\r\n  listViewInsertionCount = 0;\r\n  listViewDestroyCount = 0;\r\n\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0,\r\n    didInsertElement: function() {\r\n      listViewInsertionCount++;\r\n    },\r\n    willDestroyElement: function() {\r\n      listViewDestroyCount++;\r\n    }\r\n  });\r\n\r\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement (pre-append)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (pre-append)\");\r\n\r\n  appendView();\r\n\r\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-append)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-append)\");\r\n\r\n  equal(innerViewInsertionCount, 2, \"expected number of innerView\'s didInsertElement (post-append)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement (post-append)\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\r\n\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(50);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 50)\");\r\n\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 50)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 50)\");\r\n\r\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-scroll to 50)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-scroll to 50)\");\r\n\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(0);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 0)\");\r\n\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 0)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 0)\");\r\n\r\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-scroll to 0)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-scroll to 0)\");\r\n\r\n});\r\n\r\ntest(\"recycling complex views long list, with ReusableListItemView\", function(){\r\n  var content = helper.generateContent(50),\r\n      height = 50,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ReusableListItemView.extend({\r\n        innerViewClass: Ember.View.extend({\r\n          didInsertElement: function(){\r\n            innerViewInsertionCount++;\r\n          },\r\n          willDestroyElement: function(){\r\n            innerViewDestroyCount++;\r\n          }\r\n        }),\r\n        didInsertElement: function(){\r\n          this._super();\r\n          listItemViewInsertionCount++;\r\n        },\r\n        willDestroyElement: function(){\r\n          this._super();\r\n          listItemViewDestroyCount++;\r\n        },\r\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\r\n      });\r\n\r\n  var listViewInsertionCount, listViewDestroyCount,\r\n  listItemViewInsertionCount, listItemViewDestroyCount,\r\n  innerViewInsertionCount, innerViewDestroyCount;\r\n\r\n  listViewInsertionCount = 0;\r\n  listViewDestroyCount = 0;\r\n\r\n  listItemViewInsertionCount = 0;\r\n  listItemViewDestroyCount = 0;\r\n\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0,\r\n    didInsertElement: function() {\r\n      listViewInsertionCount++;\r\n    },\r\n    willDestroyElement: function() {\r\n      listViewDestroyCount++;\r\n    }\r\n  });\r\n\r\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement (pre-append)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (pre-append)\");\r\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (pre-append)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (pre-append)\");\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (pre-append)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (pre-append)\");\r\n\r\n  appendView();\r\n\r\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-append)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-append)\");\r\n\r\n  equal(listItemViewInsertionCount, 2, \"expected number of listItemView\'s didInsertElement (post-append)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s didInsertElement (post-append)\");\r\n\r\n  equal(innerViewInsertionCount, 2, \"expected number of innerView\'s didInsertElement (post-append)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement (post-append)\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\r\n\r\n  listItemViewInsertionCount = 0;\r\n  listItemViewDestroyCount = 0;\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(50);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 50)\");\r\n\r\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 50)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 50)\");\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 50)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 50)\");\r\n\r\n  listItemViewInsertionCount = 0;\r\n  listItemViewDestroyCount = 0;\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(0);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 0)\");\r\n\r\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 0)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 0)\");\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 0)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 0)\");\r\n});\r\n\r\ntest(\"recycling complex views short list, with ReusableListItemView\", function(){\r\n  var content = helper.generateContent(2),\r\n      height = 50,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ReusableListItemView.extend({\r\n        innerViewClass: Ember.View.extend({\r\n          didInsertElement: function(){\r\n            innerViewInsertionCount++;\r\n          },\r\n          willDestroyElement: function(){\r\n            innerViewDestroyCount++;\r\n          }\r\n        }),\r\n        didInsertElement: function(){\r\n          this._super();\r\n          listItemViewInsertionCount++;\r\n        },\r\n        willDestroyElement: function(){\r\n          this._super();\r\n          listItemViewDestroyCount++;\r\n        },\r\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\r\n      });\r\n\r\n  var listViewInsertionCount, listViewDestroyCount,\r\n  listItemViewInsertionCount, listItemViewDestroyCount,\r\n  innerViewInsertionCount, innerViewDestroyCount;\r\n\r\n  listViewInsertionCount = 0;\r\n  listViewDestroyCount = 0;\r\n\r\n  listItemViewInsertionCount = 0;\r\n  listItemViewDestroyCount = 0;\r\n\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0,\r\n    didInsertElement: function() {\r\n      listViewInsertionCount++;\r\n    },\r\n    willDestroyElement: function() {\r\n      listViewDestroyCount++;\r\n    }\r\n  });\r\n\r\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement (pre-append)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (pre-append)\");\r\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (pre-append)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (pre-append)\");\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (pre-append)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (pre-append)\");\r\n\r\n  appendView();\r\n\r\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-append)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-append)\");\r\n\r\n  equal(listItemViewInsertionCount, 2, \"expected number of listItemView\'s didInsertElement (post-append)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s didInsertElement (post-append)\");\r\n\r\n  equal(innerViewInsertionCount, 2, \"expected number of innerView\'s didInsertElement (post-append)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement (post-append)\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\r\n\r\n  listItemViewInsertionCount = 0;\r\n  listItemViewDestroyCount = 0;\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(50);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 50)\");\r\n\r\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 50)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 50)\");\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 50)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 50)\");\r\n\r\n  listItemViewInsertionCount = 0;\r\n  listItemViewDestroyCount = 0;\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(0);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 0)\");\r\n\r\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 0)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 0)\");\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 0)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 0)\");\r\n});\r\n\r\ntest(\"recycling complex views with ReusableListItemView, handling empty slots at the end of the grid\", function(){\r\n  var content = helper.generateContent(20),\r\n      height = 150,\r\n      rowHeight = 50,\r\n      width = 100,\r\n      elementWidth = 50,\r\n      itemViewClass = Ember.ReusableListItemView.extend({\r\n        innerViewClass: Ember.View.extend({\r\n          didInsertElement: function(){\r\n            innerViewInsertionCount++;\r\n          },\r\n          willDestroyElement: function(){\r\n            innerViewDestroyCount++;\r\n          }\r\n        }),\r\n        didInsertElement: function(){\r\n          this._super();\r\n          listItemViewInsertionCount++;\r\n        },\r\n        willDestroyElement: function(){\r\n          this._super();\r\n          listItemViewDestroyCount++;\r\n        },\r\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\r\n      });\r\n\r\n  var listViewInsertionCount, listViewDestroyCount,\r\n  listItemViewInsertionCount, listItemViewDestroyCount,\r\n  innerViewInsertionCount, innerViewDestroyCount;\r\n\r\n  listViewInsertionCount = 0;\r\n  listViewDestroyCount = 0;\r\n\r\n  listItemViewInsertionCount = 0;\r\n  listItemViewDestroyCount = 0;\r\n\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  view = Ember.ListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    width: width,\r\n    elementWidth: elementWidth,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0,\r\n    didInsertElement: function() {\r\n      listViewInsertionCount++;\r\n    },\r\n    willDestroyElement: function() {\r\n      listViewDestroyCount++;\r\n    }\r\n  });\r\n\r\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement (pre-append)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (pre-append)\");\r\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (pre-append)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (pre-append)\");\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (pre-append)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (pre-append)\");\r\n\r\n  appendView();\r\n\r\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-append)\");\r\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-append)\");\r\n\r\n  equal(listItemViewInsertionCount, 8, \"expected number of listItemView\'s didInsertElement (post-append)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s didInsertElement (post-append)\");\r\n\r\n  equal(innerViewInsertionCount, 8, \"expected number of innerView\'s didInsertElement (post-append)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement (post-append)\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"The correct number of items were rendered (post-append)\");\r\n  equal(view.$(\'.ember-list-item-view:visible\').length, 8, \"The number of items that are not hidden with display:none (post-append)\");\r\n\r\n  listItemViewInsertionCount = 0;\r\n  listItemViewDestroyCount = 0;\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(350);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"The correct number of items were rendered (post-scroll to 350)\");\r\n  equal(view.$(\'.ember-list-item-view:visible\').length, 8, \"The number of items that are not hidden with display:none (post-scroll to 350)\");\r\n\r\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 350)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 350)\");\r\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 350)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 350)\");\r\n\r\n  listItemViewInsertionCount = 0;\r\n  listItemViewDestroyCount = 0;\r\n  innerViewInsertionCount = 0;\r\n  innerViewDestroyCount = 0;\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\', 150);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 12, \"The correct number of items were rendered (post-expand to 3 columns)\");\r\n\r\n  equal(listItemViewInsertionCount, 4, \"expected number of listItemView\'s didInsertElement (post-expand to 3 columns)\");\r\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-expand to 3 columns)\");\r\n  equal(innerViewInsertionCount, 4, \"expected number of innerView\'s didInsertElement (post-expand to 3 columns)\");\r\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-expand to 3 columns)\");\r\n\r\n  equal(view.$(\'.ember-list-item-view:visible\').length, 12, \"The number of items that are not hidden with display:none (post-expand to 3 columns)\");\r\n});\r\n})();//@ sourceURL=recycling_tests.js");

eval("(function() {var view, helper;\r\nhelper = window.helper;\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.ListView unit: - scrollTop\", {\r\n  teardown: function() {\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n  }\r\n});\r\n\r\ntest(\"base case\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(5),\r\n    width: width,\r\n    elementWidth: elementWidth,\r\n    scrollTop: 0\r\n  });\r\n\r\n  equal(view.get(\'scrollTop\'), 0);\r\n\r\n  Ember.run(function(){\r\n    view.set(\'width\', 150);\r\n  });\r\n\r\n  equal(view.get(\'scrollTop\'), 0);\r\n});\r\n\r\ntest(\"scroll but within content length\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(5),\r\n    width: width,\r\n    elementWidth: elementWidth,\r\n    scrollTop: 100\r\n  });\r\n\r\n  equal(view.get(\'scrollTop\'), 100);\r\n\r\n  Ember.run(function(){\r\n    view.set(\'width\', 150);\r\n  });\r\n\r\n  equal(view.get(\'scrollTop\'), 0);\r\n});\r\n\r\ntest(\"scroll but beyond content length\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(5),\r\n    width: width,\r\n    elementWidth: elementWidth,\r\n    scrollTop: 1000\r\n  });\r\n\r\n  equal(view.get(\'scrollTop\'), 1000);\r\n\r\n  Ember.run(function(){\r\n    view.set(\'width\', 150);\r\n  });\r\n\r\n  equal(view.get(\'scrollTop\'), 0);\r\n});\r\n\r\n})();//@ sourceURL=scroll_top_test.js");

eval("(function() {var view, helper;\r\nhelper = window.helper;\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.ListView unit: - startingIndex\", {\r\n  teardown: function() {\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n  }\r\n});\r\n\r\ntest(\"base case\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(5),\r\n    width: width,\r\n    elementWidth: elementWidth,\r\n    scrollTop: 0\r\n  });\r\n\r\n  equal(view._startingIndex(), 0);\r\n});\r\n\r\ntest(\"scroll but within content length\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(5),\r\n    width: width,\r\n    elementWidth: elementWidth,\r\n    scrollTop: 100\r\n  });\r\n\r\n  equal(view._startingIndex(), 0);\r\n});\r\n\r\ntest(\"scroll but beyond content length\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(5),\r\n    width: width,\r\n    elementWidth: elementWidth,\r\n    scrollTop: 1000\r\n  });\r\n\r\n  equal(view._startingIndex(), 0);\r\n});\r\n\r\n\r\ntest(\"larger list\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  // 2x2 grid\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(50),\r\n    width: width,\r\n    elementWidth: elementWidth,\r\n    scrollTop: 1000\r\n  });\r\n\r\n  equal(view._startingIndex(), 28);\r\n});\r\n\r\ntest(\"larger list\", function(){\r\n  var height = 200, rowHeight = 100, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(40),\r\n    width: width,\r\n    elementWidth: width,\r\n    scrollTop: 100\r\n  });\r\n\r\n  equal(view._startingIndex(), 1);\r\n});\r\n\r\n})();//@ sourceURL=starting_index_test.js");

eval("(function() {var view, helper;\r\nhelper = window.helper;\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.ListView unit - totalHeight\", {\r\n  teardown: function() {\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n  }\r\n});\r\n\r\ntest(\"single column\", function(){\r\n  var height = 500, rowHeight = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(20)\r\n  });\r\n\r\n  equal(view.get(\'totalHeight\'), 1000);\r\n});\r\n\r\ntest(\"even\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(20),\r\n    width: width,\r\n    elementWidth: elementWidth\r\n  });\r\n\r\n  equal(view.get(\'totalHeight\'), 500);\r\n});\r\n\r\ntest(\"odd\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(21),\r\n    width: width,\r\n    elementWidth: elementWidth\r\n  });\r\n\r\n  equal(view.get(\'totalHeight\'), 550);\r\n});\r\n\r\ntest(\"with bottomPadding\", function(){\r\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\r\n\r\n  view = Ember.ListView.create({\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    content: helper.generateContent(20),\r\n    width: width,\r\n    elementWidth: elementWidth,\r\n    bottomPadding: 25\r\n  });\r\n\r\n  equal(view.get(\'totalHeight\'), 525);\r\n});\r\n})();//@ sourceURL=total_height_test.js");

eval("(function() {var css, view, helper, nextTopPosition;\r\nhelper = window.helper;\r\nnextTopPosition = 0;\r\n\r\n\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nfunction fireEvent(type, target) {\r\n  var hasTouch = (\'ontouchstart\' in window) || window.DocumentTouch && document instanceof window.DocumentTouch,\r\n    events = hasTouch ? {\r\n      start: \'touchstart\',\r\n      move: \'touchmove\',\r\n      end: \'touchend\'\r\n    } : {\r\n      start: \'mousedown\',\r\n      move: \'mousemove\',\r\n      end: \'mouseend\'\r\n    },\r\n    e = document.createEvent(\'Event\');\r\n  if (hasTouch) {\r\n    e.touches = [{target: target}];\r\n  } else {\r\n    e.which = 1;\r\n  }\r\n  e.initEvent(events[type], true, true);\r\n  target.dispatchEvent(e);\r\n}\r\n\r\nmodule(\"Ember.VirtualListView pull to refresh acceptance\", {\r\n  setup: function() {\r\n    window.Scroller = function(callback, opts){\r\n      this.callback = callback;\r\n      this.opts = opts;\r\n      this.scrollTo = function(left, top, zoom) {\r\n        view._scrollerTop = top;\r\n        view._scrollContentTo(Math.max(0, top));\r\n      };\r\n      this.setDimensions = function() { };\r\n      this.doTouchStart = function() {};\r\n      this.doTouchMove = function() {\r\n        this.scrollTo(0, nextTopPosition, 1);\r\n      };\r\n      this.activatePullToRefresh = function(pullToRefreshHeight, activateCallback, deactivateCallback, startCallback){\r\n        this.pullToRefreshHeight = pullToRefreshHeight;\r\n        this.activateCallback = activateCallback;\r\n        this.deactivateCallback = deactivateCallback;\r\n        this.startCallback = startCallback;\r\n      };\r\n      this.finishPullToRefresh = function(){\r\n        this.finishPullToRefreshCalled = true;\r\n      };\r\n      this.doTouchEnd = function() {};\r\n    };\r\n\r\n    css = Ember.$(\"<style>\" +\r\n            \".ember-list-view {\" +\r\n            \"  overflow: auto;\" +\r\n            \"  position: relative;\" +\r\n            \"}\" +\r\n            \".ember-list-item-view {\" +\r\n            \"  position: absolute;\" +\r\n            \"}\" +\r\n            \".is-selected {\" +\r\n            \"  background: red;\" +\r\n            \"}\" +\r\n            \"</style>\").appendTo(\'head\');\r\n  },\r\n  teardown: function() {\r\n    css.remove();\r\n\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n  }\r\n});\r\n\r\ntest(\"When pulling below zero, show the pull to refresh view\", function() {\r\n  expect(12);\r\n  view = Ember.VirtualListView.create({\r\n    content: helper.generateContent(6),\r\n    height: 150,\r\n    rowHeight: 50,\r\n    pullToRefreshViewClass: Ember.View.extend({\r\n      classNames: [\'pull-to-refresh\'],\r\n      template: Ember.Handlebars.compile(\"Pull to refresh...\")\r\n    }),\r\n    pullToRefreshViewHeight: 75,\r\n    activatePullToRefresh: function() {\r\n      this.pullToRefreshActivated = true;\r\n    },\r\n    deactivatePullToRefresh: function() {\r\n      this.pullToRefreshDeactivated = true;\r\n    },\r\n    startRefresh: function(finishRefresh) {\r\n      this.pullToRefreshStarted = true;\r\n      var view = this;\r\n      stop();\r\n      setTimeout(function(){\r\n        start();\r\n        ok(view.pullToRefreshView.get(\'refreshing\'), \'sets refreshing property on refresh view\');\r\n        finishRefresh();\r\n        ok(view.scroller.finishPullToRefreshCalled, \'calls back to scroller\');\r\n        ok(!view.pullToRefreshView.get(\'refreshing\'), \'unsets refreshing property on refresh view\');\r\n      }, 0);\r\n    }\r\n  });\r\n\r\n  appendView();\r\n\r\n  var pullToRefreshElement = view.$(\'.pull-to-refresh\')[0];\r\n  ok(pullToRefreshElement, \'pullToRefreshElement was rendered\');\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(150);\r\n  });\r\n\r\n  pullToRefreshElement = view.$(\'.pull-to-refresh\')[0];\r\n  ok(pullToRefreshElement, \'pullToRefreshElement was rendered\');\r\n\r\n  equal(view.scroller.pullToRefreshHeight, 75, \'informs scroller of pullToRefreshHeight\');\r\n  equal(helper.extractPosition(view._childViews[0].get(\'element\')).y, -75, \'positions pullToRefreshElement\');\r\n\r\n  view.scroller.activateCallback();\r\n  ok(view.pullToRefreshActivated, \'triggers hook function on activateCallback\');\r\n  ok(view.pullToRefreshView.get(\'active\'), \'sets active property on refresh view\');\r\n\r\n  view.scroller.deactivateCallback();\r\n  ok(view.pullToRefreshDeactivated, \'triggers hook function on deactivateCallback\');\r\n  ok(!view.pullToRefreshView.get(\'active\'), \'unsets active property on refresh view\');\r\n\r\n  view.scroller.startCallback();\r\n  ok(view.pullToRefreshStarted, \'triggers hook function on startCallback\');\r\n});\r\n})();//@ sourceURL=virtual_list_pull_to_refresh_test.js");

eval("(function() {var css, view, helper, nextTopPosition;\r\nhelper = window.helper;\r\nnextTopPosition = 0;\r\n\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nfunction fireEvent(type, target) {\r\n  var hasTouch = (\'ontouchstart\' in window) || window.DocumentTouch && document instanceof window.DocumentTouch,\r\n    events = hasTouch ? {\r\n      start: \'touchstart\',\r\n      move: \'touchmove\',\r\n      end: \'touchend\'\r\n    } : {\r\n      start: \'mousedown\',\r\n      move: \'mousemove\',\r\n      end: \'mouseend\'\r\n    },\r\n    e = document.createEvent(\'Event\');\r\n  if (hasTouch) {\r\n    e.touches = [{target: target}];\r\n  } else {\r\n    e.which = 1;\r\n  }\r\n  e.initEvent(events[type], true, true);\r\n  target.dispatchEvent(e);\r\n}\r\n\r\nmodule(\"Ember.VirtualListView scrollerstart acceptance\", {\r\n  setup: function() {\r\n    window.Scroller = function(callback, opts){\r\n      this.callback = callback;\r\n      this.opts = opts;\r\n      this.scrollTo = function(left, top, zoom) {\r\n        view._scrollerTop = top;\r\n        view._scrollContentTo(Math.max(0, top));\r\n      };\r\n      this.setDimensions = function() { };\r\n      this.doTouchStart = function() {};\r\n      this.doTouchMove = function() {\r\n        this.scrollTo(0, nextTopPosition, 1);\r\n      };\r\n      this.doTouchEnd = function() {};\r\n    };\r\n\r\n    css = Ember.$(\"<style>\" +\r\n            \".ember-list-view {\" +\r\n            \"  overflow: auto;\" +\r\n            \"  position: relative;\" +\r\n            \"}\" +\r\n            \".ember-list-item-view {\" +\r\n            \"  position: absolute;\" +\r\n            \"}\" +\r\n            \".is-selected {\" +\r\n            \"  background: red;\" +\r\n            \"}\" +\r\n            \"</style>\").appendTo(\'head\');\r\n  },\r\n  teardown: function() {\r\n    css.remove();\r\n\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n  }\r\n});\r\n\r\ntest(\"When scrolling begins, fire a scrollerstart event on the original target\", function() {\r\n  expect(1);\r\n  view = Ember.VirtualListView.create({\r\n    content: helper.generateContent(4),\r\n    height: 150,\r\n    rowHeight: 50\r\n  });\r\n\r\n  appendView();\r\n\r\n  var childElement = view.$(\'.ember-list-item-view\')[0];\r\n  Ember.$(document).on(\"scrollerstart\", function(e){\r\n    ok(e.target === childElement, \"fired scrollerstart on original target\");\r\n  });\r\n\r\n  Ember.run(function(){\r\n    nextTopPosition = nextTopPosition + 1;\r\n    fireEvent(\'start\', childElement);\r\n    fireEvent(\'move\', childElement);\r\n  });\r\n\r\n  Ember.$(document).off(\"scrollerstart\");\r\n});\r\n\r\ntest(\"fire scrollerstart event only once per scroll session\", function() {\r\n  view = Ember.VirtualListView.create({\r\n    content: helper.generateContent(4),\r\n    height: 150,\r\n    rowHeight: 50\r\n  });\r\n\r\n  appendView();\r\n\r\n  var childElement = view.$(\'.ember-list-item-view\')[0],\r\n      scrollerstartCount = 0;\r\n\r\n  Ember.$(document).on(\"scrollerstart\", function(e){\r\n    scrollerstartCount = scrollerstartCount + 1;\r\n  });\r\n\r\n  Ember.run(function(){\r\n    nextTopPosition = nextTopPosition + 1;\r\n\r\n    fireEvent(\'start\', childElement);\r\n    fireEvent(\'move\', childElement);\r\n    fireEvent(\'move\', childElement);\r\n  });\r\n\r\n  equal(scrollerstartCount, 1, \"scrollerstart should fire only once per scroll session\");\r\n\r\n  Ember.run(function(){\r\n    fireEvent(\'end\', childElement);\r\n    nextTopPosition = nextTopPosition + 1;\r\n    fireEvent(\'start\', childElement);\r\n    fireEvent(\'move\', childElement);\r\n  });\r\n\r\n  equal(scrollerstartCount, 2, \"scrollerstart should fire again for a new scroll session\");\r\n\r\n  Ember.$(document).off(\"scrollerstart\");\r\n});\r\n\r\ntest(\"doesn\'t fire scrollerstart event when view did not actually scroll vertically\", function() {\r\n  view = Ember.VirtualListView.create({\r\n    content: helper.generateContent(4),\r\n    height: 150,\r\n    rowHeight: 50\r\n  });\r\n\r\n  appendView();\r\n\r\n  var childElement = view.$(\'.ember-list-item-view\')[0],\r\n      scrollerstartCount = 0;\r\n\r\n  Ember.$(document).on(\"scrollerstart\", function(e){\r\n    scrollerstartCount = scrollerstartCount + 1;\r\n  });\r\n\r\n  Ember.run(function(){\r\n    nextTopPosition = 0;\r\n    fireEvent(\'start\', childElement);\r\n    fireEvent(\'move\', childElement);\r\n  });\r\n\r\n  equal(scrollerstartCount, 0, \"scrollerstart should not fire if view did not scroll\");\r\n\r\n  Ember.run(function(){\r\n    nextTopPosition = nextTopPosition + 1;\r\n    fireEvent(\'move\', childElement);\r\n  });\r\n\r\n  equal(scrollerstartCount, 1, \"scrollerstart should fire if view scrolled\");\r\n\r\n  Ember.$(document).off(\"scrollerstart\");\r\n});\r\n\r\ntest(\"When pulling below zero, still fire a scrollerstart event\", function() {\r\n  expect(1);\r\n  view = Ember.VirtualListView.create({\r\n    content: helper.generateContent(4),\r\n    height: 150,\r\n    rowHeight: 50\r\n  });\r\n\r\n  appendView();\r\n\r\n  var childElement = view.$(\'.ember-list-item-view\')[0];\r\n  Ember.$(document).on(\"scrollerstart\", function(e){\r\n    ok(true, \"fired scrollerstart\");\r\n  });\r\n\r\n  Ember.run(function(){\r\n    nextTopPosition = nextTopPosition - 10;\r\n    fireEvent(\'start\', childElement);\r\n    fireEvent(\'move\', childElement);\r\n  });\r\n\r\n  Ember.$(document).off(\"scrollerstart\");\r\n});\r\n\r\n})();//@ sourceURL=virtual_list_view_scrollerstart_test.js");

eval("(function() {var setDimensionsCalled = 0,\r\n    css, view, helper, scrollingDidCompleteCount,\r\n    didInitializeScrollerCount, scrollerDimensionsDidChange;\r\n\r\nhelper = window.helper;\r\n\r\n\r\nfunction appendView() {\r\n  Ember.run(function() {\r\n    view.appendTo(\'#qunit-fixture\');\r\n  });\r\n}\r\n\r\nmodule(\"Ember.VirtualListView Acceptance\", {\r\n  setup: function() {\r\n    window.Scroller = function(callback, opts){\r\n      this.callback = callback;\r\n      this.opts = opts;\r\n      this.scrollTo = function(left, top, zoom) {\r\n        view._scrollContentTo(Math.max(0, top));\r\n      };\r\n      this.setDimensions = function() { setDimensionsCalled = setDimensionsCalled + 1; };\r\n      this.doTouchStart = function() {};\r\n      this.doTouchMove = function() {};\r\n      this.doTouchEnd = function() {};\r\n    }\r\n\r\n    css = Ember.$(\"<style>\" +\r\n            \".ember-list-view {\" +\r\n            \"  overflow: auto;\" +\r\n            \"  position: relative;\" +\r\n            \"}\" +\r\n            \".ember-list-item-view {\" +\r\n            \"  position: absolute;\" +\r\n            \"}\" +\r\n            \".is-selected {\" +\r\n            \"  background: red;\" +\r\n            \"}\" +\r\n            \"</style>\").appendTo(\'head\');\r\n  },\r\n  teardown: function() {\r\n    css.remove();\r\n\r\n    Ember.run(function() {\r\n      if (view) { view.destroy(); }\r\n    });\r\n  }\r\n});\r\n\r\ntest(\"should exist\", function() {\r\n  view = Ember.VirtualListView.create({\r\n    height: 500,\r\n    rowHeight: 50\r\n  });\r\n  appendView();\r\n  ok(view);\r\n});\r\n\r\ntest(\"should render a subset of the full content, based on the height, in the correct positions\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\r\n  // equal(view.$(\':last\')[0].style.height, \"5000px\", \"The scrollable view has the correct height\");\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\r\n  equal(Ember.$(positionSorted[0]).text(), \"Item 1\");\r\n  equal(Ember.$(positionSorted[10]).text(), \"Item 11\");\r\n\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]);\r\n});\r\n\r\ntest(\"should update dimensions of scroller when totalHeight changes\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n  setDimensionsCalled = 0;\r\n\r\n  Ember.run(function(){\r\n    content.pushObject({name: \"New Item\"});\r\n  });\r\n\r\n  equal(setDimensionsCalled, 1, \"setDimensions was called on the scroller\");\r\n});\r\n\r\ntest(\"lifecycle events\", function(){\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      }),\r\n    scrollingDidCompleteCount = 0,\r\n    didInitializeScrollerCount = 0,\r\n    scrollerDimensionsDidChangeCount = 0;\r\n\r\n  view = Ember.VirtualListView.extend({\r\n    init: function(){\r\n      // Some hooks for testing\r\n      this.on(\'didInitializeScroller\', function(){ didInitializeScrollerCount++; });\r\n      this.on(\'scrollingDidComplete\',  function(){ scrollingDidCompleteCount++;  });\r\n      this.on(\'scrollerDimensionsDidChange\',  function(){ scrollerDimensionsDidChangeCount++;  });\r\n      this._super();\r\n    }\r\n  }).create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 475\r\n  });\r\n\r\n  equal(didInitializeScrollerCount, 1, \'didInitializeScroller event was fired on create\');\r\n  equal(scrollerDimensionsDidChangeCount, 1, \'scrollerDimensionsDidChangeCount event was fired on create\');\r\n  equal(scrollingDidCompleteCount, 0, \'scrollingDidCompleteCount event was NOT fired on create\');\r\n\r\n  appendView();\r\n\r\n  Ember.run(function(){\r\n    view.set(\'height\', height + 1);\r\n  });\r\n\r\n  equal(didInitializeScrollerCount, 1, \'didInitializeScroller event was fired on create\');\r\n  equal(scrollerDimensionsDidChangeCount, 2, \'scrollerDimensionsDidChangeCount event was fired on create\');\r\n  equal(scrollingDidCompleteCount, 0, \'scrollingDidCompleteCount event was NOT fired on create\');\r\n\r\n  Ember.run(function(){\r\n    view.scrollTo(0, true);\r\n    view.scroller.opts.scrollingComplete();\r\n  });\r\n\r\n  equal(didInitializeScrollerCount, 1, \'didInitializeScroller event was fired on create\');\r\n  equal(scrollerDimensionsDidChangeCount, 2, \'scrollerDimensionsDidChangeCount event was fired on create\');\r\n  equal(scrollingDidCompleteCount, 1, \'scrollingDidCompleteCount event was NOT fired on create\');\r\n});\r\n\r\ntest(\"should render correctly with an initial scrollTop\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 475\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\r\n\r\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  equal(Ember.$(positionSorted[0]).text(), \"Item 10\");\r\n  equal(Ember.$(positionSorted[10]).text(), \"Item 20\");\r\n\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950], \"The rows are in the correct positions\");\r\n});\r\n\r\ntest(\"should be programatically scrollable\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(475);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950], \"The rows are in the correct positions\");\r\n});\r\n\r\nfunction yPosition(position){\r\n  return position.y;\r\n}\r\n\r\nfunction xPosition(position){\r\n  return position.x;\r\n}\r\n\r\ntest(\"height change\", function(){\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500], \"The rows are in the correct positions\");\r\n\r\n  Ember.run(function() {\r\n    view.set(\'height\', 100);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100], \"The rows are in the correct positions\");\r\n\r\n  Ember.run(function() {\r\n    view.set(\'height\', 50);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50], \"The rows are in the correct positions\");\r\n\r\n  Ember.run(function() {\r\n    view.set(\'height\', 100);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100], \"The rows are in the correct positions\" );\r\n});\r\n\r\ntest(\"height and width change after with scroll – simple\", function(){\r\n  // start off with 2x3 grid visible and 10 elements, at top of scroll\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // x x  --|\r\n  // x x    |- viewport\r\n  // x x  --|\r\n  // + +\r\n  // 0 0\r\n  var content = helper.generateContent(10),\r\n      width = 100,\r\n      height = 150,\r\n      rowHeight = 50,\r\n      elementWidth = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\r\n        NestedViewClass: Ember.View.extend({\r\n          tagName: \'span\',\r\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\r\n        })\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    width: width,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    elementWidth: elementWidth,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0\r\n  });\r\n\r\n  appendView();\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:  0, y:    0 }, { x: 50, y:    0 },\r\n            { x:  0, y:   50 }, { x: 50, y:   50 },\r\n            { x:  0, y:  100 }, { x: 50, y:  100 },\r\n            { x:  0, y:  150 }, { x: 50, y:  150 }\r\n            ], \"initial render: The rows are rendered in the correct positions\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"initial render: The correct number of rows were rendered\");\r\n\r\n  // user is scrolled near the bottom of the list\r\n  Ember.run(function(){\r\n    view.scrollTo(101);\r\n  });\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // 0 0\r\n  // 0 0\r\n  // x x --|\r\n  // x x   |- viewport\r\n  // x x --|\r\n  // o o\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"after scroll: The correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n              { x: 0, y:  50 }, { x: 50, y:  50 },\r\n              { x: 0, y: 100 }, { x: 50, y: 100 },\r\n              { x: 0, y: 150 }, { x: 50, y: 150 },\r\n/* padding */ { x: 0, y: 200 }, { x: 50, y: 200 }], \"after scroll: The rows are in the correct positions\");\r\n\r\n  // rotate to a with 3x2 grid visible and 8 elements\r\n  Ember.run(function() {\r\n    view.set(\'width\',  150);\r\n    view.set(\'height\', 100);\r\n  });\r\n\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // 0 0 0\r\n  // x x x\r\n  // x x x --|\r\n  // x o o --|- viewport\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 9, \"after width + height change: the correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view), [\r\n    /*              */  { x:  50, y:   0 }, { x: 100, y:   0 },\r\n    { x:   0, y:  50 }, { x:  50, y:  50 }, { x: 100, y:  50 },\r\n    { x:   0, y: 100 }, { x:  50, y: 100 }, { x: 100, y: 100 },\r\n    { x:   0, y: 150 }], \"after width + height change: The rows are in the correct positions\");\r\n\r\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\r\n  deepEqual(texts, [\r\n    \'A:Item 2B:Item 2\',\r\n    \'A:Item 3B:Item 3\',\r\n    \'A:Item 4B:Item 4\',\r\n    \'A:Item 5B:Item 5\',\r\n    \'A:Item 6B:Item 6\',\r\n    \'A:Item 7B:Item 7\',\r\n    \'A:Item 8B:Item 8\',\r\n    \'A:Item 9B:Item 9\',\r\n    \'A:Item 10B:Item 10\',\r\n  ], \'after width + height change: elements should be rendered in expected position\');\r\n});\r\n\r\ntest(\"height and width change after with scroll – 1x2 -> 2x2 with 5 items\", function() {\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // x  --|\r\n  // x  --|- viewport\r\n  // +\r\n  // 0\r\n  // 0\r\n  var content = helper.generateContent(5),\r\n      width = 50,\r\n      height = 100,\r\n      rowHeight = 50,\r\n      elementWidth = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\r\n        NestedViewClass: Ember.View.extend({\r\n          tagName: \'span\',\r\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\r\n        })\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    width: width,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    elementWidth: elementWidth,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0\r\n  });\r\n\r\n  appendView();\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:  0, y:    0 },\r\n            { x:  0, y:   50 },\r\n            { x:  0, y:  100 }\r\n            ], \"initial render: The rows are rendered in the correct positions\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"initial render: The correct number of rows were rendered\");\r\n\r\n  // user is scrolled near the bottom of the list\r\n  Ember.run(function(){\r\n    view.scrollTo(151);\r\n  });\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // 0\r\n  // 0\r\n  // 0\r\n  // x --|\r\n  // x --|- viewport\r\n  // o\r\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"after scroll: The correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n              { x: 0, y: 100 },\r\n              { x: 0, y: 150 },\r\n/* padding */ { x: 0, y: 200 }], \"after scroll: The rows are in the correct positions\");\r\n\r\n  // rotate to a with 2x2 grid visible and 8 elements\r\n  Ember.run(function() {\r\n    view.set(\'width\',  100);\r\n    view.set(\'height\', 100);\r\n  });\r\n\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // 0 0\r\n  // x x --|\r\n  // x o --|- viewport\r\n  // o\r\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"after width + height change: the correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n    { x: 0, y:   0 }, { x: 50, y:   0 },\r\n    { x: 0, y:  50 }, { x: 50, y:  50 },\r\n    { x: 0, y: 100 }\r\n  ], \"The rows are in the correct positions\");\r\n\r\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\r\n  deepEqual(texts, [\r\n    \'A:Item 1B:Item 1\', \'A:Item 2B:Item 2\',\r\n    \'A:Item 3B:Item 3\', \'A:Item 4B:Item 4\',\r\n    \'A:Item 5B:Item 5\'\r\n  ], \'elements should be rendered in expected position\');\r\n});\r\n\r\ntest(\"elementWidth change\", function(){\r\n  var i,\r\n      positionSorted,\r\n      content = helper.generateContent(100),\r\n      height = 200,\r\n      width = 200,\r\n      rowHeight = 50,\r\n      elementWidth = 100,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    height: height,\r\n    width: width,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    elementWidth: elementWidth\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 0   },\r\n            { x:100, y: 0   },\r\n            { x:0,   y: 50  },\r\n            { x:100, y: 50  },\r\n            { x:0 ,  y: 100 },\r\n            { x:100, y: 100 },\r\n            { x:0,   y: 150 },\r\n            { x:100, y: 150 },\r\n            { x:0,   y: 200 },\r\n            { x:100, y: 200 }], \"The rows are in the correct positions\");\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  for(i = 0; i < 10; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\r\n  }\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\', 100);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"The correct number of rows were rendered\");\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x: 0, y: 0},\r\n            { x: 0, y: 50},\r\n            { x: 0, y: 100},\r\n            { x: 0, y: 150},\r\n            { x: 0, y: 200}\r\n  ], \"The rows are in the correct positions\");\r\n\r\n  for(i = 0; i < 5; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\r\n  }\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\', 200);\r\n  });\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 0   },\r\n            { x:100, y: 0   },\r\n            { x:0,   y: 50  },\r\n            { x:100, y: 50  },\r\n            { x:0 ,  y: 100 },\r\n            { x:100, y: 100 },\r\n            { x:0,   y: 150 },\r\n            { x:100, y: 150 },\r\n            { x:0,   y: 200 },\r\n            { x:100, y: 200 }], \"The rows are in the correct positions\");\r\n\r\n  for(i = 0; i < 10; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\r\n  }\r\n});\r\n\r\ntest(\"elementWidth change with scroll\", function(){\r\n  var i,\r\n      positionSorted,\r\n      content = helper.generateContent(100),\r\n      height = 200,\r\n      width = 200,\r\n      rowHeight = 50,\r\n      elementWidth = 100,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    height: height,\r\n    width: width,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass,\r\n    elementWidth: elementWidth\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function(){\r\n    view.scrollTo(1000);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"after scroll 1000 - The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 1000 },\r\n            { x:100, y: 1000 },\r\n            { x:0,   y: 1050 },\r\n            { x:100, y: 1050 },\r\n            { x:0 ,  y: 1100 },\r\n            { x:100, y: 1100 },\r\n            { x:0,   y: 1150 },\r\n            { x:100, y: 1150 },\r\n            { x:0,   y: 1200 },\r\n            { x:100, y: 1200 }], \"after scroll 1000 - The rows are in the correct positions\");\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  for (i = 0; i < 10; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\r\n  }\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\', 100);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 5, \" after width 100 -The correct number of rows were rendered\");\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 2000 },\r\n            { x:0,   y: 2050 },\r\n            { x:0 ,  y: 2100 },\r\n            { x:0,   y: 2150 },\r\n            { x:0,   y: 2200 }], \"after width 100 - The rows are in the correct positions\");\r\n\r\n  for(i = 0; i < 5; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\r\n  }\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\', 200);\r\n  });\r\n\r\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"after width 200 - The correct number of rows were rendered\");\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:0,   y: 1000 },\r\n            { x:100, y: 1000 },\r\n            { x:0,   y: 1050 },\r\n            { x:100, y: 1050 },\r\n            { x:0 ,  y: 1100 },\r\n            { x:100, y: 1100 },\r\n            { x:0,   y: 1150 },\r\n            { x:100, y: 1150 },\r\n            { x:0,   y: 1200 },\r\n            { x:100, y: 1200 }], \"after width 200 - The rows are in the correct positions\");\r\n\r\n  for(i = 0; i < 10; i++) {\r\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\r\n  }\r\n});\r\n\r\ntest(\"A property of an item can be changed\", function() {\r\n  var content = helper.generateContent(100),\r\n      height = 500,\r\n      rowHeight = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"{{name}}\")\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    itemViewClass: itemViewClass\r\n  });\r\n\r\n  appendView();\r\n\r\n  //Change name\r\n  Ember.run(function() {\r\n    content.set(\'0.name\', \'First change\');\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view:eq(0)\').text(), \"First change\", \"The item\'s name has been updated\");\r\n\r\n  //Scroll down, change name, and scroll back up\r\n  Ember.run(function() {\r\n    view.scrollTo(600);\r\n  });\r\n\r\n  Ember.run(function() {\r\n    content.set(\'0.name\', \'Second change\');\r\n  });\r\n\r\n  Ember.run(function() {\r\n    view.scrollTo(0);\r\n  });\r\n\r\n  equal(view.$(\'.ember-list-item-view:eq(0)\').text(), \"Second change\", \"The item\'s name has been updated\");\r\n\r\n});\r\n\r\ntest(\"The list view is wrapped in an extra div to support JS-emulated scrolling\", function() {\r\n  view = Ember.VirtualListView.create({\r\n    content: Ember.A(),\r\n    height: 100,\r\n    rowHeight: 50\r\n  });\r\n\r\n  appendView();\r\n\r\n  equal(view.$(\'.ember-list-container\').length, 1, \"expected a ember-list-container wrapper div\");\r\n  equal(view.$(\'.ember-list-container > .ember-list-item-view\').length, 0, \"expected no ember-list-items inside the wrapper div\");\r\n});\r\n\r\ntest(\"When destroyed, short-circuits syncChildViews\", function() {\r\n  expect(1);\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: helper.generateContent(4),\r\n    height: 150,\r\n    rowHeight: 50\r\n  });\r\n\r\n  appendView();\r\n\r\n  Ember.run(function(){\r\n    view.destroy();\r\n  });\r\n\r\n  Ember.run(function(){\r\n    view._syncChildViews();\r\n  });\r\n\r\n  ok(true, \'made it!\');\r\n});\r\n\r\ntest(\"adding a column, when everything is already within viewport\", function(){\r\n  // start off with 2x3 grid visible and 4 elements\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element, ?: no element\r\n  //\r\n  // x x  --|\r\n  // x x    |- viewport\r\n  // ? ?  --|\r\n  var content = helper.generateContent(4),\r\n      width = 100,\r\n      height = 150,\r\n      rowHeight = 50,\r\n      elementWidth = 50,\r\n      itemViewClass = Ember.ListItemView.extend({\r\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\r\n        NestedViewClass: Ember.View.extend({\r\n          tagName: \'span\',\r\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\r\n        })\r\n      });\r\n\r\n  view = Ember.VirtualListView.create({\r\n    content: content,\r\n    width: width,\r\n    height: height,\r\n    rowHeight: rowHeight,\r\n    elementWidth: elementWidth,\r\n    itemViewClass: itemViewClass,\r\n    scrollTop: 0\r\n  });\r\n\r\n  appendView();\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:  0, y:    0 }, { x: 50, y:    0 },\r\n            { x:  0, y:   50 }, { x: 50, y:   50 }\r\n            ], \"initial render: The rows are rendered in the correct positions\");\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 4, \"initial render: The correct number of rows were rendered\");\r\n\r\n  // rapid dimension changes\r\n  Ember.run(function() {\r\n    view.set(\'width\',  140);\r\n  });\r\n\r\n  Ember.run(function() {\r\n    view.set(\'width\',  150);\r\n  });\r\n\r\n\r\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\r\n  //\r\n  // x x x --|\r\n  // x ? ?   |- viewport\r\n  // ? ? ? --|\r\n\r\n  equal(view.$(\'.ember-list-item-view\').length, 4, \"after width + height change: the correct number of rows were rendered\");\r\n\r\n  deepEqual(helper.itemPositions(view), [\r\n            { x:  0, y:  0 }, { x: 50, y: 0 }, { x: 100, y: 0 },\r\n            { x:  0, y: 50 }\r\n            ], \"after width + height change: The rows are in the correct positions\");\r\n\r\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\r\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\r\n\r\n  deepEqual(texts, [\r\n             \'A:Item 1B:Item 1\',\r\n             \'A:Item 2B:Item 2\',\r\n             \'A:Item 3B:Item 3\',\r\n             \'A:Item 4B:Item 4\'\r\n            ], \'after width + height change: elements should be rendered in expected position\');\r\n});\r\n\r\ntest(\"Creating a VirtualListView without height and rowHeight properties should throw an exception\", function() {\r\n  throws(function() {\r\n    view = Ember.VirtualListView.create({\r\n      content: helper.generateContent(4)\r\n    });\r\n\r\n    appendView();\r\n  },\r\n  /A ListView must be created with a height and a rowHeight./, \"Throws exception.\");\r\n});\r\n})();//@ sourceURL=virtual_list_view_test.js");
